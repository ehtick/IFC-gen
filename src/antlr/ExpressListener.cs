//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/dev/Hypar/IFC-gen/grammar/Express.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Express {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ExpressParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IExpressListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.actualParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterActualParams([NotNull] ExpressParser.ActualParamsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.actualParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitActualParams([NotNull] ExpressParser.ActualParamsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.aggregateExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAggregateExpr([NotNull] ExpressParser.AggregateExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.aggregateExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAggregateExpr([NotNull] ExpressParser.AggregateExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.aggregateLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAggregateLiteral([NotNull] ExpressParser.AggregateLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.aggregateLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAggregateLiteral([NotNull] ExpressParser.AggregateLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.aggregateType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAggregateType([NotNull] ExpressParser.AggregateTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.aggregateType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAggregateType([NotNull] ExpressParser.AggregateTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.aliasDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAliasDef([NotNull] ExpressParser.AliasDefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.aliasDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAliasDef([NotNull] ExpressParser.AliasDefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.aliasRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAliasRef([NotNull] ExpressParser.AliasRefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.aliasRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAliasRef([NotNull] ExpressParser.AliasRefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.aliasStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAliasStmt([NotNull] ExpressParser.AliasStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.aliasStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAliasStmt([NotNull] ExpressParser.AliasStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.allTypeSel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAllTypeSel([NotNull] ExpressParser.AllTypeSelContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.allTypeSel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAllTypeSel([NotNull] ExpressParser.AllTypeSelContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.arrayType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayType([NotNull] ExpressParser.ArrayTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.arrayType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayType([NotNull] ExpressParser.ArrayTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.assignmentStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentStmt([NotNull] ExpressParser.AssignmentStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.assignmentStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentStmt([NotNull] ExpressParser.AssignmentStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.attrDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttrDef([NotNull] ExpressParser.AttrDefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.attrDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttrDef([NotNull] ExpressParser.AttrDefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.attributes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttributes([NotNull] ExpressParser.AttributesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.attributes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttributes([NotNull] ExpressParser.AttributesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.attrRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttrRef([NotNull] ExpressParser.AttrRefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.attrRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttrRef([NotNull] ExpressParser.AttrRefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.bagType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBagType([NotNull] ExpressParser.BagTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.bagType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBagType([NotNull] ExpressParser.BagTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.binaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryType([NotNull] ExpressParser.BinaryTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.binaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryType([NotNull] ExpressParser.BinaryTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.booleanType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanType([NotNull] ExpressParser.BooleanTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.booleanType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanType([NotNull] ExpressParser.BooleanTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.bound1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBound1([NotNull] ExpressParser.Bound1Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.bound1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBound1([NotNull] ExpressParser.Bound1Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.bound2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBound2([NotNull] ExpressParser.Bound2Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.bound2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBound2([NotNull] ExpressParser.Bound2Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.boundSpec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoundSpec([NotNull] ExpressParser.BoundSpecContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.boundSpec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoundSpec([NotNull] ExpressParser.BoundSpecContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.caseAction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseAction([NotNull] ExpressParser.CaseActionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.caseAction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseAction([NotNull] ExpressParser.CaseActionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.caseBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseBody([NotNull] ExpressParser.CaseBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.caseBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseBody([NotNull] ExpressParser.CaseBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.caseLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseLabel([NotNull] ExpressParser.CaseLabelContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.caseLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseLabel([NotNull] ExpressParser.CaseLabelContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.caseStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseStmt([NotNull] ExpressParser.CaseStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.caseStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseStmt([NotNull] ExpressParser.CaseStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.choice"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterChoice([NotNull] ExpressParser.ChoiceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.choice"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitChoice([NotNull] ExpressParser.ChoiceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.collectionType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCollectionType([NotNull] ExpressParser.CollectionTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.collectionType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCollectionType([NotNull] ExpressParser.CollectionTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.collectionTypeSel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCollectionTypeSel([NotNull] ExpressParser.CollectionTypeSelContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.collectionTypeSel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCollectionTypeSel([NotNull] ExpressParser.CollectionTypeSelContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.compoundStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompoundStmt([NotNull] ExpressParser.CompoundStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.compoundStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompoundStmt([NotNull] ExpressParser.CompoundStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.conformantArray"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConformantArray([NotNull] ExpressParser.ConformantArrayContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.conformantArray"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConformantArray([NotNull] ExpressParser.ConformantArrayContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.conformantBag"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConformantBag([NotNull] ExpressParser.ConformantBagContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.conformantBag"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConformantBag([NotNull] ExpressParser.ConformantBagContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.conformantList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConformantList([NotNull] ExpressParser.ConformantListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.conformantList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConformantList([NotNull] ExpressParser.ConformantListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.conformantSet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConformantSet([NotNull] ExpressParser.ConformantSetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.conformantSet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConformantSet([NotNull] ExpressParser.ConformantSetContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.conformantType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConformantType([NotNull] ExpressParser.ConformantTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.conformantType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConformantType([NotNull] ExpressParser.ConformantTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.constantDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantDecl([NotNull] ExpressParser.ConstantDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.constantDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantDecl([NotNull] ExpressParser.ConstantDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.constantRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantRef([NotNull] ExpressParser.ConstantRefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.constantRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantRef([NotNull] ExpressParser.ConstantRefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.constBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstBody([NotNull] ExpressParser.ConstBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.constBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstBody([NotNull] ExpressParser.ConstBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.constDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstDef([NotNull] ExpressParser.ConstDefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.constDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstDef([NotNull] ExpressParser.ConstDefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.constRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstRef([NotNull] ExpressParser.ConstRefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.constRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstRef([NotNull] ExpressParser.ConstRefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclaration([NotNull] ExpressParser.DeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclaration([NotNull] ExpressParser.DeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.deriveClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeriveClause([NotNull] ExpressParser.DeriveClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.deriveClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeriveClause([NotNull] ExpressParser.DeriveClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.deriveDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeriveDef([NotNull] ExpressParser.DeriveDefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.deriveDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeriveDef([NotNull] ExpressParser.DeriveDefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.derivedAttr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDerivedAttr([NotNull] ExpressParser.DerivedAttrContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.derivedAttr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDerivedAttr([NotNull] ExpressParser.DerivedAttrContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.derivedRedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDerivedRedef([NotNull] ExpressParser.DerivedRedefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.derivedRedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDerivedRedef([NotNull] ExpressParser.DerivedRedefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.derivedPath"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDerivedPath([NotNull] ExpressParser.DerivedPathContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.derivedPath"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDerivedPath([NotNull] ExpressParser.DerivedPathContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.domainRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDomainRule([NotNull] ExpressParser.DomainRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.domainRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDomainRule([NotNull] ExpressParser.DomainRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.domainRules"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDomainRules([NotNull] ExpressParser.DomainRulesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.domainRules"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDomainRules([NotNull] ExpressParser.DomainRulesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElement([NotNull] ExpressParser.ElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElement([NotNull] ExpressParser.ElementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.embeddedRemark"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmbeddedRemark([NotNull] ExpressParser.EmbeddedRemarkContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.embeddedRemark"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmbeddedRemark([NotNull] ExpressParser.EmbeddedRemarkContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.entityBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEntityBody([NotNull] ExpressParser.EntityBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.entityBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEntityBody([NotNull] ExpressParser.EntityBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.entityDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEntityDecl([NotNull] ExpressParser.EntityDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.entityDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEntityDecl([NotNull] ExpressParser.EntityDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.entityDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEntityDef([NotNull] ExpressParser.EntityDefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.entityDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEntityDef([NotNull] ExpressParser.EntityDefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.entityHead"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEntityHead([NotNull] ExpressParser.EntityHeadContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.entityHead"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEntityHead([NotNull] ExpressParser.EntityHeadContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.entityLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEntityLiteral([NotNull] ExpressParser.EntityLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.entityLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEntityLiteral([NotNull] ExpressParser.EntityLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.entityRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEntityRef([NotNull] ExpressParser.EntityRefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.entityRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEntityRef([NotNull] ExpressParser.EntityRefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.enumDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumDef([NotNull] ExpressParser.EnumDefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.enumDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumDef([NotNull] ExpressParser.EnumDefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.enumRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumRef([NotNull] ExpressParser.EnumRefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.enumRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumRef([NotNull] ExpressParser.EnumRefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.enumType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumType([NotNull] ExpressParser.EnumTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.enumType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumType([NotNull] ExpressParser.EnumTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.enumValues"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumValues([NotNull] ExpressParser.EnumValuesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.enumValues"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumValues([NotNull] ExpressParser.EnumValuesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.escapeStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEscapeStmt([NotNull] ExpressParser.EscapeStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.escapeStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEscapeStmt([NotNull] ExpressParser.EscapeStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.explDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExplDef([NotNull] ExpressParser.ExplDefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.explDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExplDef([NotNull] ExpressParser.ExplDefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.explicitClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExplicitClause([NotNull] ExpressParser.ExplicitClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.explicitClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExplicitClause([NotNull] ExpressParser.ExplicitClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.explRedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExplRedef([NotNull] ExpressParser.ExplRedefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.explRedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExplRedef([NotNull] ExpressParser.ExplRedefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] ExpressParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] ExpressParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactor([NotNull] ExpressParser.FactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactor([NotNull] ExpressParser.FactorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.formalParam"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormalParam([NotNull] ExpressParser.FormalParamContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.formalParam"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormalParam([NotNull] ExpressParser.FormalParamContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.formalParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormalParams([NotNull] ExpressParser.FormalParamsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.formalParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormalParams([NotNull] ExpressParser.FormalParamsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.funcDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncDef([NotNull] ExpressParser.FuncDefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.funcDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncDef([NotNull] ExpressParser.FuncDefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.funcHead"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncHead([NotNull] ExpressParser.FuncHeadContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.funcHead"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncHead([NotNull] ExpressParser.FuncHeadContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.returnTypeChoice"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnTypeChoice([NotNull] ExpressParser.ReturnTypeChoiceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.returnTypeChoice"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnTypeChoice([NotNull] ExpressParser.ReturnTypeChoiceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.funcRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncRef([NotNull] ExpressParser.FuncRefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.funcRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncRef([NotNull] ExpressParser.FuncRefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.functionDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDecl([NotNull] ExpressParser.FunctionDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.functionDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDecl([NotNull] ExpressParser.FunctionDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.genericType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericType([NotNull] ExpressParser.GenericTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.genericType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericType([NotNull] ExpressParser.GenericTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.ifStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStmt([NotNull] ExpressParser.IfStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.ifStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStmt([NotNull] ExpressParser.IfStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.importEntity"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportEntity([NotNull] ExpressParser.ImportEntityContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.importEntity"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportEntity([NotNull] ExpressParser.ImportEntityContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.importItem"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportItem([NotNull] ExpressParser.ImportItemContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.importItem"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportItem([NotNull] ExpressParser.ImportItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.importList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportList([NotNull] ExpressParser.ImportListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.importList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportList([NotNull] ExpressParser.ImportListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.importRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportRef([NotNull] ExpressParser.ImportRefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.importRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportRef([NotNull] ExpressParser.ImportRefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.incr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIncr([NotNull] ExpressParser.IncrContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.incr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIncr([NotNull] ExpressParser.IncrContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.incrementControl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIncrementControl([NotNull] ExpressParser.IncrementControlContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.incrementControl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIncrementControl([NotNull] ExpressParser.IncrementControlContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.init"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInit([NotNull] ExpressParser.InitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.init"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInit([NotNull] ExpressParser.InitContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.integerType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerType([NotNull] ExpressParser.IntegerTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.integerType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerType([NotNull] ExpressParser.IntegerTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.interfaceSpecification"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterfaceSpecification([NotNull] ExpressParser.InterfaceSpecificationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.interfaceSpecification"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterfaceSpecification([NotNull] ExpressParser.InterfaceSpecificationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.interval"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterval([NotNull] ExpressParser.IntervalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.interval"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterval([NotNull] ExpressParser.IntervalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.inverseAttr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInverseAttr([NotNull] ExpressParser.InverseAttrContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.inverseAttr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInverseAttr([NotNull] ExpressParser.InverseAttrContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.inverseClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInverseClause([NotNull] ExpressParser.InverseClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.inverseClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInverseClause([NotNull] ExpressParser.InverseClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.inverseDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInverseDef([NotNull] ExpressParser.InverseDefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.inverseDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInverseDef([NotNull] ExpressParser.InverseDefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.inverseRedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInverseRedef([NotNull] ExpressParser.InverseRedefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.inverseRedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInverseRedef([NotNull] ExpressParser.InverseRedefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.inverseType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInverseType([NotNull] ExpressParser.InverseTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.inverseType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInverseType([NotNull] ExpressParser.InverseTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.labelDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLabelDef([NotNull] ExpressParser.LabelDefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.labelDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLabelDef([NotNull] ExpressParser.LabelDefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.listType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListType([NotNull] ExpressParser.ListTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.listType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListType([NotNull] ExpressParser.ListTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] ExpressParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] ExpressParser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.localDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLocalDecl([NotNull] ExpressParser.LocalDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.localDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLocalDecl([NotNull] ExpressParser.LocalDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.localRules"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLocalRules([NotNull] ExpressParser.LocalRulesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.localRules"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLocalRules([NotNull] ExpressParser.LocalRulesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.localVar"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLocalVar([NotNull] ExpressParser.LocalVarContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.localVar"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLocalVar([NotNull] ExpressParser.LocalVarContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.logicalExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalExpr([NotNull] ExpressParser.LogicalExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.logicalExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalExpr([NotNull] ExpressParser.LogicalExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.logicalType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalType([NotNull] ExpressParser.LogicalTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.logicalType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalType([NotNull] ExpressParser.LogicalTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.namedType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamedType([NotNull] ExpressParser.NamedTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.namedType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamedType([NotNull] ExpressParser.NamedTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.nullStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNullStmt([NotNull] ExpressParser.NullStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.nullStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNullStmt([NotNull] ExpressParser.NullStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.numberExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberExpr([NotNull] ExpressParser.NumberExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.numberExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberExpr([NotNull] ExpressParser.NumberExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.numberType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberType([NotNull] ExpressParser.NumberTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.numberType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberType([NotNull] ExpressParser.NumberTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.otherAction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOtherAction([NotNull] ExpressParser.OtherActionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.otherAction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOtherAction([NotNull] ExpressParser.OtherActionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.paramDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParamDef([NotNull] ExpressParser.ParamDefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.paramDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParamDef([NotNull] ExpressParser.ParamDefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter([NotNull] ExpressParser.ParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter([NotNull] ExpressParser.ParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.paramRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParamRef([NotNull] ExpressParser.ParamRefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.paramRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParamRef([NotNull] ExpressParser.ParamRefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.precisionSpec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrecisionSpec([NotNull] ExpressParser.PrecisionSpecContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.precisionSpec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrecisionSpec([NotNull] ExpressParser.PrecisionSpecContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.procCallStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcCallStmt([NotNull] ExpressParser.ProcCallStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.procCallStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcCallStmt([NotNull] ExpressParser.ProcCallStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.procDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcDef([NotNull] ExpressParser.ProcDefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.procDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcDef([NotNull] ExpressParser.ProcDefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.procedureDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcedureDecl([NotNull] ExpressParser.ProcedureDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.procedureDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcedureDecl([NotNull] ExpressParser.ProcedureDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.procHead"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcHead([NotNull] ExpressParser.ProcHeadContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.procHead"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcHead([NotNull] ExpressParser.ProcHeadContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.procRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcRef([NotNull] ExpressParser.ProcRefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.procRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcRef([NotNull] ExpressParser.ProcRefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.prolog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProlog([NotNull] ExpressParser.PrologContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.prolog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProlog([NotNull] ExpressParser.PrologContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.pseudoType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPseudoType([NotNull] ExpressParser.PseudoTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.pseudoType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPseudoType([NotNull] ExpressParser.PseudoTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.qualifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQualifier([NotNull] ExpressParser.QualifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.qualifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQualifier([NotNull] ExpressParser.QualifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.queryAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryAssignment([NotNull] ExpressParser.QueryAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.queryAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryAssignment([NotNull] ExpressParser.QueryAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.queryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryExpr([NotNull] ExpressParser.QueryExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.queryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryExpr([NotNull] ExpressParser.QueryExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.queryScan"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryScan([NotNull] ExpressParser.QueryScanContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.queryScan"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryScan([NotNull] ExpressParser.QueryScanContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.realType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRealType([NotNull] ExpressParser.RealTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.realType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRealType([NotNull] ExpressParser.RealTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.referenceClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReferenceClause([NotNull] ExpressParser.ReferenceClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.referenceClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReferenceClause([NotNull] ExpressParser.ReferenceClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.referencedAttr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReferencedAttr([NotNull] ExpressParser.ReferencedAttrContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.referencedAttr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReferencedAttr([NotNull] ExpressParser.ReferencedAttrContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.remark"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRemark([NotNull] ExpressParser.RemarkContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.remark"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRemark([NotNull] ExpressParser.RemarkContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.remarkStuff"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRemarkStuff([NotNull] ExpressParser.RemarkStuffContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.remarkStuff"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRemarkStuff([NotNull] ExpressParser.RemarkStuffContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.repeatControl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRepeatControl([NotNull] ExpressParser.RepeatControlContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.repeatControl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRepeatControl([NotNull] ExpressParser.RepeatControlContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.repeateStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRepeateStmt([NotNull] ExpressParser.RepeateStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.repeateStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRepeateStmt([NotNull] ExpressParser.RepeateStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.repetition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRepetition([NotNull] ExpressParser.RepetitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.repetition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRepetition([NotNull] ExpressParser.RepetitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.returnStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStmt([NotNull] ExpressParser.ReturnStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.returnStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStmt([NotNull] ExpressParser.ReturnStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.ruleDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRuleDecl([NotNull] ExpressParser.RuleDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.ruleDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRuleDecl([NotNull] ExpressParser.RuleDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.ruleDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRuleDef([NotNull] ExpressParser.RuleDefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.ruleDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRuleDef([NotNull] ExpressParser.RuleDefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.ruleHead"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRuleHead([NotNull] ExpressParser.RuleHeadContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.ruleHead"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRuleHead([NotNull] ExpressParser.RuleHeadContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.ruleList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRuleList([NotNull] ExpressParser.RuleListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.ruleList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRuleList([NotNull] ExpressParser.RuleListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.schemaBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSchemaBody([NotNull] ExpressParser.SchemaBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.schemaBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSchemaBody([NotNull] ExpressParser.SchemaBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.schemaDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSchemaDecl([NotNull] ExpressParser.SchemaDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.schemaDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSchemaDecl([NotNull] ExpressParser.SchemaDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.schemaRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSchemaRef([NotNull] ExpressParser.SchemaRefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.schemaRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSchemaRef([NotNull] ExpressParser.SchemaRefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelector([NotNull] ExpressParser.SelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelector([NotNull] ExpressParser.SelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.selectType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectType([NotNull] ExpressParser.SelectTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.selectType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectType([NotNull] ExpressParser.SelectTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.selectValues"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectValues([NotNull] ExpressParser.SelectValuesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.selectValues"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectValues([NotNull] ExpressParser.SelectValuesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.setType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetType([NotNull] ExpressParser.SetTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.setType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetType([NotNull] ExpressParser.SetTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.simpleExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleExpr([NotNull] ExpressParser.SimpleExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.simpleExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleExpr([NotNull] ExpressParser.SimpleExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.simpleFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleFactor([NotNull] ExpressParser.SimpleFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.simpleFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleFactor([NotNull] ExpressParser.SimpleFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleType([NotNull] ExpressParser.SimpleTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleType([NotNull] ExpressParser.SimpleTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.skipStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSkipStmt([NotNull] ExpressParser.SkipStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.skipStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSkipStmt([NotNull] ExpressParser.SkipStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.stdConst"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStdConst([NotNull] ExpressParser.StdConstContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.stdConst"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStdConst([NotNull] ExpressParser.StdConstContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.stdFunc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStdFunc([NotNull] ExpressParser.StdFuncContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.stdFunc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStdFunc([NotNull] ExpressParser.StdFuncContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.stdProc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStdProc([NotNull] ExpressParser.StdProcContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.stdProc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStdProc([NotNull] ExpressParser.StdProcContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmt([NotNull] ExpressParser.StmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmt([NotNull] ExpressParser.StmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.stmts"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmts([NotNull] ExpressParser.StmtsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.stmts"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmts([NotNull] ExpressParser.StmtsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.stringType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringType([NotNull] ExpressParser.StringTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.stringType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringType([NotNull] ExpressParser.StringTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.subSuper"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubSuper([NotNull] ExpressParser.SubSuperContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.subSuper"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubSuper([NotNull] ExpressParser.SubSuperContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.subscript"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubscript([NotNull] ExpressParser.SubscriptContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.subscript"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubscript([NotNull] ExpressParser.SubscriptContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.subtypeDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubtypeDecl([NotNull] ExpressParser.SubtypeDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.subtypeDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubtypeDecl([NotNull] ExpressParser.SubtypeDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.supertypeDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSupertypeDecl([NotNull] ExpressParser.SupertypeDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.supertypeDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSupertypeDecl([NotNull] ExpressParser.SupertypeDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.supertypeExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSupertypeExpr([NotNull] ExpressParser.SupertypeExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.supertypeExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSupertypeExpr([NotNull] ExpressParser.SupertypeExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.supertypeFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSupertypeFactor([NotNull] ExpressParser.SupertypeFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.supertypeFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSupertypeFactor([NotNull] ExpressParser.SupertypeFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.tailRemark"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTailRemark([NotNull] ExpressParser.TailRemarkContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.tailRemark"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTailRemark([NotNull] ExpressParser.TailRemarkContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerm([NotNull] ExpressParser.TermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerm([NotNull] ExpressParser.TermContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.typeBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeBody([NotNull] ExpressParser.TypeBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.typeBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeBody([NotNull] ExpressParser.TypeBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.typeDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeDecl([NotNull] ExpressParser.TypeDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.typeDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeDecl([NotNull] ExpressParser.TypeDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.typeDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeDef([NotNull] ExpressParser.TypeDefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.typeDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeDef([NotNull] ExpressParser.TypeDefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.typeLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeLabel([NotNull] ExpressParser.TypeLabelContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.typeLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeLabel([NotNull] ExpressParser.TypeLabelContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.typeRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeRef([NotNull] ExpressParser.TypeRefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.typeRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeRef([NotNull] ExpressParser.TypeRefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.typeSel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeSel([NotNull] ExpressParser.TypeSelContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.typeSel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeSel([NotNull] ExpressParser.TypeSelContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.unaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryOp([NotNull] ExpressParser.UnaryOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.unaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryOp([NotNull] ExpressParser.UnaryOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.uniqueRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUniqueRule([NotNull] ExpressParser.UniqueRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.uniqueRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUniqueRule([NotNull] ExpressParser.UniqueRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.uniqueRules"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUniqueRules([NotNull] ExpressParser.UniqueRulesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.uniqueRules"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUniqueRules([NotNull] ExpressParser.UniqueRulesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.untilControl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUntilControl([NotNull] ExpressParser.UntilControlContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.untilControl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUntilControl([NotNull] ExpressParser.UntilControlContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.useClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUseClause([NotNull] ExpressParser.UseClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.useClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUseClause([NotNull] ExpressParser.UseClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.useList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUseList([NotNull] ExpressParser.UseListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.useList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUseList([NotNull] ExpressParser.UseListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.varDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDef([NotNull] ExpressParser.VarDefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.varDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDef([NotNull] ExpressParser.VarDefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.varParam"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarParam([NotNull] ExpressParser.VarParamContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.varParam"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarParam([NotNull] ExpressParser.VarParamContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.varParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarParams([NotNull] ExpressParser.VarParamsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.varParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarParams([NotNull] ExpressParser.VarParamsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.varRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarRef([NotNull] ExpressParser.VarRefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.varRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarRef([NotNull] ExpressParser.VarRefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.whileControl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileControl([NotNull] ExpressParser.WhileControlContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.whileControl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileControl([NotNull] ExpressParser.WhileControlContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressParser.width"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWidth([NotNull] ExpressParser.WidthContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressParser.width"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWidth([NotNull] ExpressParser.WidthContext context);
}
} // namespace Express
