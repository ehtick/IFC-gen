//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/iankeough/dev/Hypar/IFC-gen/grammar/Express.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Express {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class ExpressParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, ABS=34, ABSTRACT=35, ACOS=36, AGGREGATE=37, ALIAS=38, 
		AND=39, ANDOR=40, ARRAY=41, AS=42, ASIN=43, ATAN=44, BAG=45, BEGIN=46, 
		BINARY=47, BLENGTH=48, BOOLEAN=49, BY=50, CASE=51, CONSTANT=52, CONST_E=53, 
		COS=54, DERIVE=55, DIV=56, ELSE=57, END=58, END_ALIAS=59, END_CASE=60, 
		END_CONSTANT=61, END_ENTITY=62, END_FUNCTION=63, END_IF=64, END_LOCAL=65, 
		END_PROCEDURE=66, END_RULE=67, END_REPEAT=68, END_SCHEMA=69, END_TYPE=70, 
		ENTITY=71, ENUMERATION=72, ESCAPE=73, EXISTS=74, EXP=75, FALSE=76, FIXED=77, 
		FOR=78, FORMAT=79, FROM=80, FUNCTION=81, GENERIC=82, HIBOUND=83, HIINDEX=84, 
		IF=85, IN=86, INSERT=87, INVERSE=88, INTEGER=89, LENGTH=90, LIKE=91, LIST=92, 
		LOCAL=93, LOGICAL=94, LOBOUND=95, LOINDEX=96, LOG=97, LOG2=98, LOG10=99, 
		MOD=100, NOT=101, NUMBER=102, NVL=103, ODD=104, OF=105, ONEOF=106, OPTIONAL=107, 
		OR=108, OTHERWISE=109, PI=110, PROCEDURE=111, QUERY=112, REAL=113, REFERENCE=114, 
		REMOVE=115, REPEAT=116, RETURN=117, ROLESOF=118, RULE=119, SCHEMA=120, 
		SELECT=121, SELF=122, SET=123, SIN=124, SIZEOF=125, SKIP2=126, SQRT=127, 
		STRING=128, SUBTYPE=129, SUPERTYPE=130, TAN=131, THEN=132, TO=133, TRUE=134, 
		TYPE=135, TYPEOF=136, UNIQUE=137, UNKNOWN=138, UNTIL=139, USE=140, USEDIN=141, 
		VALUE=142, VAR=143, WHERE=144, WHILE=145, XOR=146, SchemaDef=147, SimpleId=148, 
		Path=149, IntegerLiteral=150, BinaryLiteral=151, LogicalLiteral=152, RealLiteral=153, 
		Digits=154, Letter=155, Character=156, QuoteChar=157, StringLiteral=158, 
		NewlineChar=159, WS=160, Comments=161, Rules=162, Functons=163;
	public const int
		RULE_actualParams = 0, RULE_aggregateExpr = 1, RULE_aggregateLiteral = 2, 
		RULE_aggregateType = 3, RULE_aliasDef = 4, RULE_aliasRef = 5, RULE_aliasStmt = 6, 
		RULE_allTypeSel = 7, RULE_arrayType = 8, RULE_assignmentStmt = 9, RULE_attrDef = 10, 
		RULE_attributes = 11, RULE_attrRef = 12, RULE_bagType = 13, RULE_binaryType = 14, 
		RULE_booleanType = 15, RULE_bound1 = 16, RULE_bound2 = 17, RULE_boundSpec = 18, 
		RULE_caseAction = 19, RULE_caseBody = 20, RULE_caseLabel = 21, RULE_caseStmt = 22, 
		RULE_choice = 23, RULE_collectionType = 24, RULE_collectionTypeSel = 25, 
		RULE_compoundStmt = 26, RULE_conformantArray = 27, RULE_conformantBag = 28, 
		RULE_conformantList = 29, RULE_conformantSet = 30, RULE_conformantType = 31, 
		RULE_constantDecl = 32, RULE_constantRef = 33, RULE_constBody = 34, RULE_constDef = 35, 
		RULE_constRef = 36, RULE_declaration = 37, RULE_deriveClause = 38, RULE_deriveDef = 39, 
		RULE_derivedAttr = 40, RULE_derivedRedef = 41, RULE_derivedPath = 42, 
		RULE_domainRule = 43, RULE_domainRules = 44, RULE_element = 45, RULE_embeddedRemark = 46, 
		RULE_entityBody = 47, RULE_entityDecl = 48, RULE_entityDef = 49, RULE_entityHead = 50, 
		RULE_entityLiteral = 51, RULE_entityRef = 52, RULE_enumDef = 53, RULE_enumRef = 54, 
		RULE_enumType = 55, RULE_enumValues = 56, RULE_escapeStmt = 57, RULE_explDef = 58, 
		RULE_explicitClause = 59, RULE_explRedef = 60, RULE_expression = 61, RULE_factor = 62, 
		RULE_formalParam = 63, RULE_formalParams = 64, RULE_funcDef = 65, RULE_funcHead = 66, 
		RULE_returnTypeChoice = 67, RULE_funcRef = 68, RULE_functionDecl = 69, 
		RULE_genericType = 70, RULE_ifStmt = 71, RULE_importEntity = 72, RULE_importItem = 73, 
		RULE_importList = 74, RULE_importRef = 75, RULE_incr = 76, RULE_incrementControl = 77, 
		RULE_init = 78, RULE_integerType = 79, RULE_interfaceSpecification = 80, 
		RULE_interval = 81, RULE_inverseAttr = 82, RULE_inverseClause = 83, RULE_inverseDef = 84, 
		RULE_inverseRedef = 85, RULE_inverseType = 86, RULE_labelDef = 87, RULE_listType = 88, 
		RULE_literal = 89, RULE_localDecl = 90, RULE_localRules = 91, RULE_localVar = 92, 
		RULE_logicalExpr = 93, RULE_logicalType = 94, RULE_namedType = 95, RULE_nullStmt = 96, 
		RULE_numberExpr = 97, RULE_numberType = 98, RULE_otherAction = 99, RULE_paramDef = 100, 
		RULE_parameter = 101, RULE_paramRef = 102, RULE_precisionSpec = 103, RULE_procCallStmt = 104, 
		RULE_procDef = 105, RULE_procedureDecl = 106, RULE_procHead = 107, RULE_procRef = 108, 
		RULE_prolog = 109, RULE_pseudoType = 110, RULE_qualifier = 111, RULE_queryAssignment = 112, 
		RULE_queryExpr = 113, RULE_queryScan = 114, RULE_realType = 115, RULE_referenceClause = 116, 
		RULE_referencedAttr = 117, RULE_remark = 118, RULE_remarkStuff = 119, 
		RULE_repeatControl = 120, RULE_repeateStmt = 121, RULE_repetition = 122, 
		RULE_returnStmt = 123, RULE_ruleDecl = 124, RULE_ruleDef = 125, RULE_ruleHead = 126, 
		RULE_ruleList = 127, RULE_schemaBody = 128, RULE_schemaDecl = 129, RULE_schemaRef = 130, 
		RULE_selector = 131, RULE_selectType = 132, RULE_selectValues = 133, RULE_setType = 134, 
		RULE_simpleExpr = 135, RULE_simpleFactor = 136, RULE_simpleType = 137, 
		RULE_skipStmt = 138, RULE_stdConst = 139, RULE_stdFunc = 140, RULE_stdProc = 141, 
		RULE_stmt = 142, RULE_stmts = 143, RULE_stringType = 144, RULE_subSuper = 145, 
		RULE_subscript = 146, RULE_subtypeDecl = 147, RULE_supertypeDecl = 148, 
		RULE_supertypeExpr = 149, RULE_supertypeFactor = 150, RULE_tailRemark = 151, 
		RULE_term = 152, RULE_typeBody = 153, RULE_typeDecl = 154, RULE_typeDef = 155, 
		RULE_typeLabel = 156, RULE_typeRef = 157, RULE_typeSel = 158, RULE_unaryOp = 159, 
		RULE_uniqueRule = 160, RULE_uniqueRules = 161, RULE_untilControl = 162, 
		RULE_useClause = 163, RULE_useList = 164, RULE_varDef = 165, RULE_varParam = 166, 
		RULE_varParams = 167, RULE_varRef = 168, RULE_whileControl = 169, RULE_width = 170;
	public static readonly string[] ruleNames = {
		"actualParams", "aggregateExpr", "aggregateLiteral", "aggregateType", 
		"aliasDef", "aliasRef", "aliasStmt", "allTypeSel", "arrayType", "assignmentStmt", 
		"attrDef", "attributes", "attrRef", "bagType", "binaryType", "booleanType", 
		"bound1", "bound2", "boundSpec", "caseAction", "caseBody", "caseLabel", 
		"caseStmt", "choice", "collectionType", "collectionTypeSel", "compoundStmt", 
		"conformantArray", "conformantBag", "conformantList", "conformantSet", 
		"conformantType", "constantDecl", "constantRef", "constBody", "constDef", 
		"constRef", "declaration", "deriveClause", "deriveDef", "derivedAttr", 
		"derivedRedef", "derivedPath", "domainRule", "domainRules", "element", 
		"embeddedRemark", "entityBody", "entityDecl", "entityDef", "entityHead", 
		"entityLiteral", "entityRef", "enumDef", "enumRef", "enumType", "enumValues", 
		"escapeStmt", "explDef", "explicitClause", "explRedef", "expression", 
		"factor", "formalParam", "formalParams", "funcDef", "funcHead", "returnTypeChoice", 
		"funcRef", "functionDecl", "genericType", "ifStmt", "importEntity", "importItem", 
		"importList", "importRef", "incr", "incrementControl", "init", "integerType", 
		"interfaceSpecification", "interval", "inverseAttr", "inverseClause", 
		"inverseDef", "inverseRedef", "inverseType", "labelDef", "listType", "literal", 
		"localDecl", "localRules", "localVar", "logicalExpr", "logicalType", "namedType", 
		"nullStmt", "numberExpr", "numberType", "otherAction", "paramDef", "parameter", 
		"paramRef", "precisionSpec", "procCallStmt", "procDef", "procedureDecl", 
		"procHead", "procRef", "prolog", "pseudoType", "qualifier", "queryAssignment", 
		"queryExpr", "queryScan", "realType", "referenceClause", "referencedAttr", 
		"remark", "remarkStuff", "repeatControl", "repeateStmt", "repetition", 
		"returnStmt", "ruleDecl", "ruleDef", "ruleHead", "ruleList", "schemaBody", 
		"schemaDecl", "schemaRef", "selector", "selectType", "selectValues", "setType", 
		"simpleExpr", "simpleFactor", "simpleType", "skipStmt", "stdConst", "stdFunc", 
		"stdProc", "stmt", "stmts", "stringType", "subSuper", "subscript", "subtypeDecl", 
		"supertypeDecl", "supertypeExpr", "supertypeFactor", "tailRemark", "term", 
		"typeBody", "typeDecl", "typeDef", "typeLabel", "typeRef", "typeSel", 
		"unaryOp", "uniqueRule", "uniqueRules", "untilControl", "useClause", "useList", 
		"varDef", "varParam", "varParams", "varRef", "whileControl", "width"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "'--'", "','", "')'", "'['", "']'", "':'", "';'", "':='", 
		"'[]'", "'\\'", "'(*'", "'*)'", "'.'", "'<'", "'>'", "'<='", "'>='", "'<>'", 
		"'='", "':<>:'", "':=:'", "'**'", "'{'", "'}'", "'<*'", "'|'", "'+'", 
		"'-'", "'?'", "'*'", "'/'", "'||'", "'ABS'", "'ABSTRACT'", "'ACOS'", "'AGGREGATE'", 
		"'ALIAS'", "'AND'", "'ANDOR'", "'ARRAY'", "'AS'", "'ASIN'", "'ATAN'", 
		"'BAG'", "'BEGIN'", "'BINARY'", "'BLENGTH'", "'BOOLEAN'", "'BY'", "'CASE'", 
		"'CONSTANT'", "'CONST_E'", "'COS'", "'DERIVE'", "'DIV'", "'ELSE'", "'END'", 
		"'END_ALIAS'", "'END_CASE'", "'END_CONSTANT'", "'END_ENTITY'", "'END_FUNCTION'", 
		"'END_IF'", "'END_LOCAL'", "'END_PROCEDURE'", "'END_RULE'", "'END_REPEAT'", 
		"'END_SCHEMA'", "'END_TYPE'", "'ENTITY'", "'ENUMERATION'", "'ESCAPE'", 
		"'EXISTS'", "'EXP'", "'FALSE'", "'FIXED'", "'FOR'", "'FORMAT'", "'FROM'", 
		"'FUNCTION'", null, "'HIBOUND'", "'HIINDEX'", "'IF'", "'IN'", "'INSERT'", 
		"'INVERSE'", "'INTEGER'", "'LENGTH'", "'LIKE'", "'LIST'", "'LOCAL'", "'LOGICAL'", 
		"'LOBOUND'", "'LOINDEX'", "'LOG'", "'LOG2'", "'LOG10'", "'MOD'", "'NOT'", 
		"'NUMBER'", "'NVL'", "'ODD'", null, "'ONEOF'", "'OPTIONAL'", "'OR'", "'OTHERWISE'", 
		"'PI'", "'PROCEDURE'", "'QUERY'", "'REAL'", "'REFERENCE'", "'REMOVE'", 
		"'REPEAT'", "'RETURN'", "'ROLESOF'", "'RULE'", "'SCHEMA'", "'SELECT'", 
		"'SELF'", "'SET'", "'SIN'", "'SIZEOF'", "'SKIP'", "'SQRT'", "'STRING'", 
		"'SUBTYPE'", "'SUPERTYPE'", "'TAN'", "'THEN'", "'TO'", "'TRUE'", "'TYPE'", 
		"'TYPEOF'", "'UNIQUE'", "'UNKNOWN'", "'UNTIL'", "'USE'", "'USEDIN'", "'VALUE'", 
		"'VAR'", "'WHERE'", "'WHILE'", "'XOR'", null, null, null, null, null, 
		null, null, null, null, null, "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "ABS", "ABSTRACT", 
		"ACOS", "AGGREGATE", "ALIAS", "AND", "ANDOR", "ARRAY", "AS", "ASIN", "ATAN", 
		"BAG", "BEGIN", "BINARY", "BLENGTH", "BOOLEAN", "BY", "CASE", "CONSTANT", 
		"CONST_E", "COS", "DERIVE", "DIV", "ELSE", "END", "END_ALIAS", "END_CASE", 
		"END_CONSTANT", "END_ENTITY", "END_FUNCTION", "END_IF", "END_LOCAL", "END_PROCEDURE", 
		"END_RULE", "END_REPEAT", "END_SCHEMA", "END_TYPE", "ENTITY", "ENUMERATION", 
		"ESCAPE", "EXISTS", "EXP", "FALSE", "FIXED", "FOR", "FORMAT", "FROM", 
		"FUNCTION", "GENERIC", "HIBOUND", "HIINDEX", "IF", "IN", "INSERT", "INVERSE", 
		"INTEGER", "LENGTH", "LIKE", "LIST", "LOCAL", "LOGICAL", "LOBOUND", "LOINDEX", 
		"LOG", "LOG2", "LOG10", "MOD", "NOT", "NUMBER", "NVL", "ODD", "OF", "ONEOF", 
		"OPTIONAL", "OR", "OTHERWISE", "PI", "PROCEDURE", "QUERY", "REAL", "REFERENCE", 
		"REMOVE", "REPEAT", "RETURN", "ROLESOF", "RULE", "SCHEMA", "SELECT", "SELF", 
		"SET", "SIN", "SIZEOF", "SKIP2", "SQRT", "STRING", "SUBTYPE", "SUPERTYPE", 
		"TAN", "THEN", "TO", "TRUE", "TYPE", "TYPEOF", "UNIQUE", "UNKNOWN", "UNTIL", 
		"USE", "USEDIN", "VALUE", "VAR", "WHERE", "WHILE", "XOR", "SchemaDef", 
		"SimpleId", "Path", "IntegerLiteral", "BinaryLiteral", "LogicalLiteral", 
		"RealLiteral", "Digits", "Letter", "Character", "QuoteChar", "StringLiteral", 
		"NewlineChar", "WS", "Comments", "Rules", "Functons"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Express.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExpressParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ActualParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SimpleId() { return GetTokens(ExpressParser.SimpleId); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId(int i) {
			return GetToken(ExpressParser.SimpleId, i);
		}
		public ActualParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actualParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterActualParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitActualParams(this);
		}
	}

	[RuleVersion(0)]
	public ActualParamsContext actualParams() {
		ActualParamsContext _localctx = new ActualParamsContext(Context, State);
		EnterRule(_localctx, 0, RULE_actualParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			Match(T__0);
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 343;
				Match(T__1);
				State = 344;
				Match(SimpleId);
				}
			}

			State = 347;
			parameter();
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 348;
				Match(T__2);
				State = 351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 349;
					Match(T__1);
					State = 350;
					Match(SimpleId);
					}
				}

				State = 353;
				parameter();
				}
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 359;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AggregateExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterAggregateExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitAggregateExpr(this);
		}
	}

	[RuleVersion(0)]
	public AggregateExprContext aggregateExpr() {
		AggregateExprContext _localctx = new AggregateExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_aggregateExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public AggregateLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterAggregateLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitAggregateLiteral(this);
		}
	}

	[RuleVersion(0)]
	public AggregateLiteralContext aggregateLiteral() {
		AggregateLiteralContext _localctx = new AggregateLiteralContext(Context, State);
		EnterRule(_localctx, 4, RULE_aggregateLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			Match(T__4);
			State = 364;
			element();
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 365;
				Match(T__2);
				State = 366;
				element();
				}
				}
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 372;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(ExpressParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllTypeSelContext allTypeSel() {
			return GetRuleContext<AllTypeSelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeLabelContext typeLabel() {
			return GetRuleContext<TypeLabelContext>(0);
		}
		public AggregateTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterAggregateType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitAggregateType(this);
		}
	}

	[RuleVersion(0)]
	public AggregateTypeContext aggregateType() {
		AggregateTypeContext _localctx = new AggregateTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_aggregateType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			Match(AGGREGATE);
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 375;
				Match(T__6);
				State = 376;
				typeLabel();
				}
			}

			State = 379;
			Match(OF);
			State = 380;
			allTypeSel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		public AliasDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterAliasDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitAliasDef(this);
		}
	}

	[RuleVersion(0)]
	public AliasDefContext aliasDef() {
		AliasDefContext _localctx = new AliasDefContext(Context, State);
		EnterRule(_localctx, 8, RULE_aliasDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			Match(SimpleId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		public AliasRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterAliasRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitAliasRef(this);
		}
	}

	[RuleVersion(0)]
	public AliasRefContext aliasRef() {
		AliasRefContext _localctx = new AliasRefContext(Context, State);
		EnterRule(_localctx, 10, RULE_aliasRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			Match(SimpleId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(ExpressParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasDefContext aliasDef() {
			return GetRuleContext<AliasDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ExpressParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_ALIAS() { return GetToken(ExpressParser.END_ALIAS, 0); }
		public AliasStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterAliasStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitAliasStmt(this);
		}
	}

	[RuleVersion(0)]
	public AliasStmtContext aliasStmt() {
		AliasStmtContext _localctx = new AliasStmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_aliasStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			Match(ALIAS);
			State = 387;
			aliasDef();
			State = 388;
			Match(FOR);
			State = 389;
			varRef();
			State = 390;
			Match(T__7);
			State = 391;
			stmts();
			State = 392;
			Match(END_ALIAS);
			State = 393;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllTypeSelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AggregateTypeContext aggregateType() {
			return GetRuleContext<AggregateTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConformantTypeContext conformantType() {
			return GetRuleContext<ConformantTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedTypeContext namedType() {
			return GetRuleContext<NamedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudoTypeContext pseudoType() {
			return GetRuleContext<PseudoTypeContext>(0);
		}
		public AllTypeSelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allTypeSel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterAllTypeSel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitAllTypeSel(this);
		}
	}

	[RuleVersion(0)]
	public AllTypeSelContext allTypeSel() {
		AllTypeSelContext _localctx = new AllTypeSelContext(Context, State);
		EnterRule(_localctx, 14, RULE_allTypeSel);
		try {
			State = 400;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 395;
				aggregateType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 396;
				conformantType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 397;
				simpleType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 398;
				namedType();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 399;
				pseudoType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(ExpressParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoundSpecContext boundSpec() {
			return GetRuleContext<BoundSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeSelContext collectionTypeSel() {
			return GetRuleContext<CollectionTypeSelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(ExpressParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(ExpressParser.UNIQUE, 0); }
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_arrayType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			Match(ARRAY);
			State = 403;
			boundSpec();
			State = 404;
			Match(OF);
			State = 406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONAL) {
				{
				State = 405;
				Match(OPTIONAL);
				}
			}

			State = 409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE) {
				{
				State = 408;
				Match(UNIQUE);
				}
			}

			State = 411;
			collectionTypeSel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerivedPathContext derivedPath() {
			return GetRuleContext<DerivedPathContext>(0);
		}
		public AssignmentStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterAssignmentStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitAssignmentStmt(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStmtContext assignmentStmt() {
		AssignmentStmtContext _localctx = new AssignmentStmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_assignmentStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			varRef();
			State = 414;
			Match(T__8);
			State = 418;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 415;
				expression();
				}
				break;
			case 2:
				{
				State = 416;
				derivedPath();
				}
				break;
			case 3:
				{
				State = 417;
				Match(T__9);
				}
				break;
			}
			State = 420;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Path() { return GetToken(ExpressParser.Path, 0); }
		public AttrDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterAttrDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitAttrDef(this);
		}
	}

	[RuleVersion(0)]
	public AttrDefContext attrDef() {
		AttrDefContext _localctx = new AttrDefContext(Context, State);
		EnterRule(_localctx, 20, RULE_attrDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			_la = TokenStream.LA(1);
			if ( !(_la==SimpleId || _la==Path) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitClauseContext[] explicitClause() {
			return GetRuleContexts<ExplicitClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitClauseContext explicitClause(int i) {
			return GetRuleContext<ExplicitClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeriveClauseContext[] deriveClause() {
			return GetRuleContexts<DeriveClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeriveClauseContext deriveClause(int i) {
			return GetRuleContext<DeriveClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InverseClauseContext[] inverseClause() {
			return GetRuleContexts<InverseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InverseClauseContext inverseClause(int i) {
			return GetRuleContext<InverseClauseContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(Context, State);
		EnterRule(_localctx, 22, RULE_attributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SimpleId || _la==Path) {
				{
				{
				State = 424;
				explicitClause();
				}
				}
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DERIVE) {
				{
				{
				State = 430;
				deriveClause();
				}
				}
				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INVERSE) {
				{
				{
				State = 436;
				inverseClause();
				}
				}
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Path() { return GetToken(ExpressParser.Path, 0); }
		public AttrRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterAttrRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitAttrRef(this);
		}
	}

	[RuleVersion(0)]
	public AttrRefContext attrRef() {
		AttrRefContext _localctx = new AttrRefContext(Context, State);
		EnterRule(_localctx, 24, RULE_attrRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			_la = TokenStream.LA(1);
			if ( !(_la==SimpleId || _la==Path) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BagTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAG() { return GetToken(ExpressParser.BAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeSelContext collectionTypeSel() {
			return GetRuleContext<CollectionTypeSelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoundSpecContext boundSpec() {
			return GetRuleContext<BoundSpecContext>(0);
		}
		public BagTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bagType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterBagType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitBagType(this);
		}
	}

	[RuleVersion(0)]
	public BagTypeContext bagType() {
		BagTypeContext _localctx = new BagTypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_bagType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			Match(BAG);
			State = 446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 445;
				boundSpec();
				}
			}

			State = 448;
			Match(OF);
			State = 449;
			collectionTypeSel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(ExpressParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WidthContext width() {
			return GetRuleContext<WidthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(ExpressParser.FIXED, 0); }
		public BinaryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterBinaryType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitBinaryType(this);
		}
	}

	[RuleVersion(0)]
	public BinaryTypeContext binaryType() {
		BinaryTypeContext _localctx = new BinaryTypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_binaryType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			Match(BINARY);
			State = 458;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 452;
				Match(T__0);
				State = 453;
				width();
				State = 454;
				Match(T__3);
				State = 456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FIXED) {
					{
					State = 455;
					Match(FIXED);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(ExpressParser.BOOLEAN, 0); }
		public BooleanTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterBooleanType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitBooleanType(this);
		}
	}

	[RuleVersion(0)]
	public BooleanTypeContext booleanType() {
		BooleanTypeContext _localctx = new BooleanTypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_booleanType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			Match(BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bound1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberExprContext numberExpr() {
			return GetRuleContext<NumberExprContext>(0);
		}
		public Bound1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bound1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterBound1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitBound1(this);
		}
	}

	[RuleVersion(0)]
	public Bound1Context bound1() {
		Bound1Context _localctx = new Bound1Context(Context, State);
		EnterRule(_localctx, 32, RULE_bound1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			numberExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bound2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberExprContext numberExpr() {
			return GetRuleContext<NumberExprContext>(0);
		}
		public Bound2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bound2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterBound2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitBound2(this);
		}
	}

	[RuleVersion(0)]
	public Bound2Context bound2() {
		Bound2Context _localctx = new Bound2Context(Context, State);
		EnterRule(_localctx, 34, RULE_bound2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			numberExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bound1Context bound1() {
			return GetRuleContext<Bound1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bound2Context bound2() {
			return GetRuleContext<Bound2Context>(0);
		}
		public BoundSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterBoundSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitBoundSpec(this);
		}
	}

	[RuleVersion(0)]
	public BoundSpecContext boundSpec() {
		BoundSpecContext _localctx = new BoundSpecContext(Context, State);
		EnterRule(_localctx, 36, RULE_boundSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			Match(T__4);
			State = 467;
			bound1();
			State = 468;
			Match(T__6);
			State = 469;
			bound2();
			State = 470;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseLabelContext[] caseLabel() {
			return GetRuleContexts<CaseLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseLabelContext caseLabel(int i) {
			return GetRuleContext<CaseLabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public CaseActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterCaseAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitCaseAction(this);
		}
	}

	[RuleVersion(0)]
	public CaseActionContext caseAction() {
		CaseActionContext _localctx = new CaseActionContext(Context, State);
		EnterRule(_localctx, 38, RULE_caseAction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			caseLabel();
			State = 477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 473;
				Match(T__2);
				State = 474;
				caseLabel();
				}
				}
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 480;
			Match(T__6);
			State = 481;
			stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseActionContext[] caseAction() {
			return GetRuleContexts<CaseActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseActionContext caseAction(int i) {
			return GetRuleContext<CaseActionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherActionContext otherAction() {
			return GetRuleContext<OtherActionContext>(0);
		}
		public CaseBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterCaseBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitCaseBody(this);
		}
	}

	[RuleVersion(0)]
	public CaseBodyContext caseBody() {
		CaseBodyContext _localctx = new CaseBodyContext(Context, State);
		EnterRule(_localctx, 40, RULE_caseBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 27331747838427170L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 5921409221678671399L) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & 139139L) != 0)) {
				{
				{
				State = 483;
				caseAction();
				}
				}
				State = 488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OTHERWISE) {
				{
				State = 489;
				otherAction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterCaseLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitCaseLabel(this);
		}
	}

	[RuleVersion(0)]
	public CaseLabelContext caseLabel() {
		CaseLabelContext _localctx = new CaseLabelContext(Context, State);
		EnterRule(_localctx, 42, RULE_caseLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(ExpressParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBodyContext caseBody() {
			return GetRuleContext<CaseBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_CASE() { return GetToken(ExpressParser.END_CASE, 0); }
		public CaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterCaseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitCaseStmt(this);
		}
	}

	[RuleVersion(0)]
	public CaseStmtContext caseStmt() {
		CaseStmtContext _localctx = new CaseStmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_caseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			Match(CASE);
			State = 495;
			selector();
			State = 496;
			Match(OF);
			State = 497;
			caseBody();
			State = 498;
			Match(END_CASE);
			State = 499;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChoiceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONEOF() { return GetToken(ExpressParser.ONEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SupertypeExprContext[] supertypeExpr() {
			return GetRuleContexts<SupertypeExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SupertypeExprContext supertypeExpr(int i) {
			return GetRuleContext<SupertypeExprContext>(i);
		}
		public ChoiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitChoice(this);
		}
	}

	[RuleVersion(0)]
	public ChoiceContext choice() {
		ChoiceContext _localctx = new ChoiceContext(Context, State);
		EnterRule(_localctx, 46, RULE_choice);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			Match(ONEOF);
			State = 502;
			Match(T__0);
			State = 503;
			supertypeExpr();
			State = 508;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 504;
				Match(T__2);
				State = 505;
				supertypeExpr();
				}
				}
				State = 510;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 511;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BagTypeContext bagType() {
			return GetRuleContext<BagTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetTypeContext setType() {
			return GetRuleContext<SetTypeContext>(0);
		}
		public CollectionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterCollectionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitCollectionType(this);
		}
	}

	[RuleVersion(0)]
	public CollectionTypeContext collectionType() {
		CollectionTypeContext _localctx = new CollectionTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_collectionType);
		try {
			State = 517;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ARRAY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 513;
				arrayType();
				}
				break;
			case BAG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 514;
				bagType();
				}
				break;
			case LIST:
				EnterOuterAlt(_localctx, 3);
				{
				State = 515;
				listType();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 516;
				setType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionTypeSelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedTypeContext namedType() {
			return GetRuleContext<NamedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public CollectionTypeSelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionTypeSel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterCollectionTypeSel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitCollectionTypeSel(this);
		}
	}

	[RuleVersion(0)]
	public CollectionTypeSelContext collectionTypeSel() {
		CollectionTypeSelContext _localctx = new CollectionTypeSelContext(Context, State);
		EnterRule(_localctx, 50, RULE_collectionTypeSel);
		try {
			State = 523;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ARRAY:
			case BAG:
			case LIST:
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 519;
				collectionType();
				}
				break;
			case SimpleId:
				EnterOuterAlt(_localctx, 2);
				{
				State = 520;
				namedType();
				}
				break;
			case BINARY:
			case BOOLEAN:
			case INTEGER:
			case LOGICAL:
			case NUMBER:
			case REAL:
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 521;
				simpleType();
				}
				break;
			case GENERIC:
				EnterOuterAlt(_localctx, 4);
				{
				State = 522;
				genericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(ExpressParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ExpressParser.END, 0); }
		public CompoundStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterCompoundStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitCompoundStmt(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStmtContext compoundStmt() {
		CompoundStmtContext _localctx = new CompoundStmtContext(Context, State);
		EnterRule(_localctx, 52, RULE_compoundStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			Match(BEGIN);
			State = 526;
			stmts();
			State = 527;
			Match(END);
			State = 528;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConformantArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(ExpressParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllTypeSelContext allTypeSel() {
			return GetRuleContext<AllTypeSelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(ExpressParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(ExpressParser.UNIQUE, 0); }
		public ConformantArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conformantArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterConformantArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitConformantArray(this);
		}
	}

	[RuleVersion(0)]
	public ConformantArrayContext conformantArray() {
		ConformantArrayContext _localctx = new ConformantArrayContext(Context, State);
		EnterRule(_localctx, 54, RULE_conformantArray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			Match(ARRAY);
			State = 531;
			Match(OF);
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONAL) {
				{
				State = 532;
				Match(OPTIONAL);
				}
			}

			State = 536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE) {
				{
				State = 535;
				Match(UNIQUE);
				}
			}

			State = 538;
			allTypeSel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConformantBagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAG() { return GetToken(ExpressParser.BAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllTypeSelContext allTypeSel() {
			return GetRuleContext<AllTypeSelContext>(0);
		}
		public ConformantBagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conformantBag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterConformantBag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitConformantBag(this);
		}
	}

	[RuleVersion(0)]
	public ConformantBagContext conformantBag() {
		ConformantBagContext _localctx = new ConformantBagContext(Context, State);
		EnterRule(_localctx, 56, RULE_conformantBag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			Match(BAG);
			State = 541;
			Match(OF);
			State = 542;
			allTypeSel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConformantListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(ExpressParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllTypeSelContext allTypeSel() {
			return GetRuleContext<AllTypeSelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(ExpressParser.UNIQUE, 0); }
		public ConformantListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conformantList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterConformantList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitConformantList(this);
		}
	}

	[RuleVersion(0)]
	public ConformantListContext conformantList() {
		ConformantListContext _localctx = new ConformantListContext(Context, State);
		EnterRule(_localctx, 58, RULE_conformantList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			Match(LIST);
			State = 545;
			Match(OF);
			State = 547;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE) {
				{
				State = 546;
				Match(UNIQUE);
				}
			}

			State = 549;
			allTypeSel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConformantSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(ExpressParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllTypeSelContext allTypeSel() {
			return GetRuleContext<AllTypeSelContext>(0);
		}
		public ConformantSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conformantSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterConformantSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitConformantSet(this);
		}
	}

	[RuleVersion(0)]
	public ConformantSetContext conformantSet() {
		ConformantSetContext _localctx = new ConformantSetContext(Context, State);
		EnterRule(_localctx, 60, RULE_conformantSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			Match(SET);
			State = 552;
			Match(OF);
			State = 553;
			allTypeSel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConformantTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConformantArrayContext conformantArray() {
			return GetRuleContext<ConformantArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConformantBagContext conformantBag() {
			return GetRuleContext<ConformantBagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConformantListContext conformantList() {
			return GetRuleContext<ConformantListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConformantSetContext conformantSet() {
			return GetRuleContext<ConformantSetContext>(0);
		}
		public ConformantTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conformantType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterConformantType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitConformantType(this);
		}
	}

	[RuleVersion(0)]
	public ConformantTypeContext conformantType() {
		ConformantTypeContext _localctx = new ConformantTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_conformantType);
		try {
			State = 559;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ARRAY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 555;
				conformantArray();
				}
				break;
			case BAG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 556;
				conformantBag();
				}
				break;
			case LIST:
				EnterOuterAlt(_localctx, 3);
				{
				State = 557;
				conformantList();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 558;
				conformantSet();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(ExpressParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_CONSTANT() { return GetToken(ExpressParser.END_CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstBodyContext[] constBody() {
			return GetRuleContexts<ConstBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstBodyContext constBody(int i) {
			return GetRuleContext<ConstBodyContext>(i);
		}
		public ConstantDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterConstantDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitConstantDecl(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclContext constantDecl() {
		ConstantDeclContext _localctx = new ConstantDeclContext(Context, State);
		EnterRule(_localctx, 64, RULE_constantDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			Match(CONSTANT);
			State = 565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SimpleId) {
				{
				{
				State = 562;
				constBody();
				}
				}
				State = 567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 568;
			Match(END_CONSTANT);
			State = 569;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		public ConstantRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterConstantRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitConstantRef(this);
		}
	}

	[RuleVersion(0)]
	public ConstantRefContext constantRef() {
		ConstantRefContext _localctx = new ConstantRefContext(Context, State);
		EnterRule(_localctx, 66, RULE_constantRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			Match(SimpleId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstDefContext constDef() {
			return GetRuleContext<ConstDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeSelContext collectionTypeSel() {
			return GetRuleContext<CollectionTypeSelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		public ConstBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterConstBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitConstBody(this);
		}
	}

	[RuleVersion(0)]
	public ConstBodyContext constBody() {
		ConstBodyContext _localctx = new ConstBodyContext(Context, State);
		EnterRule(_localctx, 68, RULE_constBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			constDef();
			State = 574;
			Match(T__6);
			State = 575;
			collectionTypeSel();
			State = 576;
			init();
			State = 577;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		public ConstDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterConstDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitConstDef(this);
		}
	}

	[RuleVersion(0)]
	public ConstDefContext constDef() {
		ConstDefContext _localctx = new ConstDefContext(Context, State);
		EnterRule(_localctx, 70, RULE_constDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			Match(SimpleId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstDefContext constDef() {
			return GetRuleContext<ConstDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StdConstContext stdConst() {
			return GetRuleContext<StdConstContext>(0);
		}
		public ConstRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterConstRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitConstRef(this);
		}
	}

	[RuleVersion(0)]
	public ConstRefContext constRef() {
		ConstRefContext _localctx = new ConstRefContext(Context, State);
		EnterRule(_localctx, 72, RULE_constRef);
		try {
			State = 583;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SimpleId:
				EnterOuterAlt(_localctx, 1);
				{
				State = 581;
				constDef();
				}
				break;
			case T__29:
			case CONST_E:
			case PI:
			case SELF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 582;
				stdConst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityDeclContext entityDecl() {
			return GetRuleContext<EntityDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl() {
			return GetRuleContext<FunctionDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDeclContext procedureDecl() {
			return GetRuleContext<ProcedureDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclContext typeDecl() {
			return GetRuleContext<TypeDeclContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 74, RULE_declaration);
		try {
			State = 589;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENTITY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 585;
				entityDecl();
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 586;
				functionDecl();
				}
				break;
			case PROCEDURE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 587;
				procedureDecl();
				}
				break;
			case TYPE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 588;
				typeDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeriveClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DERIVE() { return GetToken(ExpressParser.DERIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DerivedAttrContext[] derivedAttr() {
			return GetRuleContexts<DerivedAttrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerivedAttrContext derivedAttr(int i) {
			return GetRuleContext<DerivedAttrContext>(i);
		}
		public DeriveClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deriveClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterDeriveClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitDeriveClause(this);
		}
	}

	[RuleVersion(0)]
	public DeriveClauseContext deriveClause() {
		DeriveClauseContext _localctx = new DeriveClauseContext(Context, State);
		EnterRule(_localctx, 76, RULE_deriveClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			Match(DERIVE);
			State = 593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 592;
				derivedAttr();
				}
				}
				State = 595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SimpleId || _la==Path );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeriveDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttrDefContext attrDef() {
			return GetRuleContext<AttrDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeSelContext collectionTypeSel() {
			return GetRuleContext<CollectionTypeSelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		public DeriveDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deriveDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterDeriveDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitDeriveDef(this);
		}
	}

	[RuleVersion(0)]
	public DeriveDefContext deriveDef() {
		DeriveDefContext _localctx = new DeriveDefContext(Context, State);
		EnterRule(_localctx, 78, RULE_deriveDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			attrDef();
			State = 598;
			Match(T__6);
			State = 599;
			collectionTypeSel();
			State = 600;
			init();
			State = 601;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivedAttrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeriveDefContext deriveDef() {
			return GetRuleContext<DeriveDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerivedRedefContext derivedRedef() {
			return GetRuleContext<DerivedRedefContext>(0);
		}
		public DerivedAttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivedAttr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterDerivedAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitDerivedAttr(this);
		}
	}

	[RuleVersion(0)]
	public DerivedAttrContext derivedAttr() {
		DerivedAttrContext _localctx = new DerivedAttrContext(Context, State);
		EnterRule(_localctx, 80, RULE_derivedAttr);
		try {
			State = 605;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 603;
				deriveDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 604;
				derivedRedef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivedRedefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttrRefContext attrRef() {
			return GetRuleContext<AttrRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeSelContext collectionTypeSel() {
			return GetRuleContext<CollectionTypeSelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		public DerivedRedefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivedRedef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterDerivedRedef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitDerivedRedef(this);
		}
	}

	[RuleVersion(0)]
	public DerivedRedefContext derivedRedef() {
		DerivedRedefContext _localctx = new DerivedRedefContext(Context, State);
		EnterRule(_localctx, 82, RULE_derivedRedef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			attrRef();
			State = 608;
			Match(T__6);
			State = 609;
			collectionTypeSel();
			State = 610;
			init();
			State = 611;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivedPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Path() { return GetToken(ExpressParser.Path, 0); }
		public DerivedPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivedPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterDerivedPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitDerivedPath(this);
		}
	}

	[RuleVersion(0)]
	public DerivedPathContext derivedPath() {
		DerivedPathContext _localctx = new DerivedPathContext(Context, State);
		EnterRule(_localctx, 84, RULE_derivedPath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			expression();
			State = 614;
			Match(T__10);
			State = 615;
			Match(Path);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelDefContext labelDef() {
			return GetRuleContext<LabelDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExprContext logicalExpr() {
			return GetRuleContext<LogicalExprContext>(0);
		}
		public DomainRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_domainRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterDomainRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitDomainRule(this);
		}
	}

	[RuleVersion(0)]
	public DomainRuleContext domainRule() {
		DomainRuleContext _localctx = new DomainRuleContext(Context, State);
		EnterRule(_localctx, 86, RULE_domainRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			labelDef();
			State = 618;
			Match(T__6);
			State = 619;
			logicalExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainRulesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(ExpressParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DomainRuleContext[] domainRule() {
			return GetRuleContexts<DomainRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DomainRuleContext domainRule(int i) {
			return GetRuleContext<DomainRuleContext>(i);
		}
		public DomainRulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_domainRules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterDomainRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitDomainRules(this);
		}
	}

	[RuleVersion(0)]
	public DomainRulesContext domainRules() {
		DomainRulesContext _localctx = new DomainRulesContext(Context, State);
		EnterRule(_localctx, 88, RULE_domainRules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			Match(WHERE);
			State = 625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 622;
				domainRule();
				State = 623;
				Match(T__7);
				}
				}
				State = 627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SimpleId );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepetitionContext repetition() {
			return GetRuleContext<RepetitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(ExpressParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RealLiteral() { return GetToken(ExpressParser.RealLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DerivedPathContext derivedPath() {
			return GetRuleContext<DerivedPathContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 90, RULE_element);
		try {
			State = 637;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 629;
				expression();
				State = 630;
				Match(T__6);
				State = 631;
				repetition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 633;
				Match(StringLiteral);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 634;
				Match(RealLiteral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 635;
				expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 636;
				derivedPath();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmbeddedRemarkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EmbeddedRemarkContext[] embeddedRemark() {
			return GetRuleContexts<EmbeddedRemarkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmbeddedRemarkContext embeddedRemark(int i) {
			return GetRuleContext<EmbeddedRemarkContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemarkStuffContext[] remarkStuff() {
			return GetRuleContexts<RemarkStuffContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemarkStuffContext remarkStuff(int i) {
			return GetRuleContext<RemarkStuffContext>(i);
		}
		public EmbeddedRemarkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embeddedRemark; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEmbeddedRemark(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEmbeddedRemark(this);
		}
	}

	[RuleVersion(0)]
	public EmbeddedRemarkContext embeddedRemark() {
		EmbeddedRemarkContext _localctx = new EmbeddedRemarkContext(Context, State);
		EnterRule(_localctx, 92, RULE_embeddedRemark);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			Match(T__11);
			State = 644;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 642;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
					case 1:
						{
						State = 640;
						embeddedRemark();
						}
						break;
					case 2:
						{
						State = 641;
						remarkStuff();
						}
						break;
					}
					} 
				}
				State = 646;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			State = 647;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalRulesContext localRules() {
			return GetRuleContext<LocalRulesContext>(0);
		}
		public EntityBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEntityBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEntityBody(this);
		}
	}

	[RuleVersion(0)]
	public EntityBodyContext entityBody() {
		EntityBodyContext _localctx = new EntityBodyContext(Context, State);
		EnterRule(_localctx, 94, RULE_entityBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			attributes();
			State = 650;
			localRules();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityHeadContext entityHead() {
			return GetRuleContext<EntityHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityBodyContext entityBody() {
			return GetRuleContext<EntityBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_ENTITY() { return GetToken(ExpressParser.END_ENTITY, 0); }
		public EntityDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEntityDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEntityDecl(this);
		}
	}

	[RuleVersion(0)]
	public EntityDeclContext entityDecl() {
		EntityDeclContext _localctx = new EntityDeclContext(Context, State);
		EnterRule(_localctx, 96, RULE_entityDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			entityHead();
			State = 653;
			entityBody();
			State = 654;
			Match(END_ENTITY);
			State = 655;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		public EntityDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEntityDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEntityDef(this);
		}
	}

	[RuleVersion(0)]
	public EntityDefContext entityDef() {
		EntityDefContext _localctx = new EntityDefContext(Context, State);
		EnterRule(_localctx, 98, RULE_entityDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			Match(SimpleId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY() { return GetToken(ExpressParser.ENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityDefContext entityDef() {
			return GetRuleContext<EntityDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubSuperContext subSuper() {
			return GetRuleContext<SubSuperContext>(0);
		}
		public EntityHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEntityHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEntityHead(this);
		}
	}

	[RuleVersion(0)]
	public EntityHeadContext entityHead() {
		EntityHeadContext _localctx = new EntityHeadContext(Context, State);
		EnterRule(_localctx, 100, RULE_entityHead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659;
			Match(ENTITY);
			State = 660;
			entityDef();
			State = 661;
			subSuper();
			State = 662;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityRefContext entityRef() {
			return GetRuleContext<EntityRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EntityLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEntityLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEntityLiteral(this);
		}
	}

	[RuleVersion(0)]
	public EntityLiteralContext entityLiteral() {
		EntityLiteralContext _localctx = new EntityLiteralContext(Context, State);
		EnterRule(_localctx, 102, RULE_entityLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664;
			entityRef();
			State = 665;
			Match(T__0);
			State = 674;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 27331747838427170L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 5921409221678671399L) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & 139139L) != 0)) {
				{
				State = 666;
				expression();
				State = 671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 667;
					Match(T__2);
					State = 668;
					expression();
					}
					}
					State = 673;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 676;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		public EntityRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEntityRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEntityRef(this);
		}
	}

	[RuleVersion(0)]
	public EntityRefContext entityRef() {
		EntityRefContext _localctx = new EntityRefContext(Context, State);
		EnterRule(_localctx, 104, RULE_entityRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			Match(SimpleId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		public EnumDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEnumDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEnumDef(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefContext enumDef() {
		EnumDefContext _localctx = new EnumDefContext(Context, State);
		EnterRule(_localctx, 106, RULE_enumDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680;
			Match(SimpleId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext enumDef() {
			return GetRuleContext<EnumDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public EnumRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEnumRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEnumRef(this);
		}
	}

	[RuleVersion(0)]
	public EnumRefContext enumRef() {
		EnumRefContext _localctx = new EnumRefContext(Context, State);
		EnterRule(_localctx, 108, RULE_enumRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 682;
				typeRef();
				State = 683;
				Match(T__13);
				}
				break;
			}
			State = 687;
			enumDef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUMERATION() { return GetToken(ExpressParser.ENUMERATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValuesContext enumValues() {
			return GetRuleContext<EnumValuesContext>(0);
		}
		public EnumTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEnumType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEnumType(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeContext enumType() {
		EnumTypeContext _localctx = new EnumTypeContext(Context, State);
		EnterRule(_localctx, 110, RULE_enumType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689;
			Match(ENUMERATION);
			State = 690;
			Match(OF);
			State = 691;
			Match(T__0);
			State = 692;
			enumValues();
			State = 693;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext[] enumDef() {
			return GetRuleContexts<EnumDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext enumDef(int i) {
			return GetRuleContext<EnumDefContext>(i);
		}
		public EnumValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValues; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEnumValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEnumValues(this);
		}
	}

	[RuleVersion(0)]
	public EnumValuesContext enumValues() {
		EnumValuesContext _localctx = new EnumValuesContext(Context, State);
		EnterRule(_localctx, 112, RULE_enumValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695;
			enumDef();
			State = 700;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 696;
				Match(T__2);
				State = 697;
				enumDef();
				}
				}
				State = 702;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscapeStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(ExpressParser.ESCAPE, 0); }
		public EscapeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escapeStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterEscapeStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitEscapeStmt(this);
		}
	}

	[RuleVersion(0)]
	public EscapeStmtContext escapeStmt() {
		EscapeStmtContext _localctx = new EscapeStmtContext(Context, State);
		EnterRule(_localctx, 114, RULE_escapeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			Match(ESCAPE);
			State = 704;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttrDefContext[] attrDef() {
			return GetRuleContexts<AttrDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrDefContext attrDef(int i) {
			return GetRuleContext<AttrDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeSelContext collectionTypeSel() {
			return GetRuleContext<CollectionTypeSelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(ExpressParser.OPTIONAL, 0); }
		public ExplDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterExplDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitExplDef(this);
		}
	}

	[RuleVersion(0)]
	public ExplDefContext explDef() {
		ExplDefContext _localctx = new ExplDefContext(Context, State);
		EnterRule(_localctx, 116, RULE_explDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706;
			attrDef();
			State = 711;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 707;
				Match(T__2);
				State = 708;
				attrDef();
				}
				}
				State = 713;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 714;
			Match(T__6);
			State = 716;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONAL) {
				{
				State = 715;
				Match(OPTIONAL);
				}
			}

			State = 718;
			collectionTypeSel();
			State = 719;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplDefContext explDef() {
			return GetRuleContext<ExplDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplRedefContext explRedef() {
			return GetRuleContext<ExplRedefContext>(0);
		}
		public ExplicitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterExplicitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitExplicitClause(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitClauseContext explicitClause() {
		ExplicitClauseContext _localctx = new ExplicitClauseContext(Context, State);
		EnterRule(_localctx, 118, RULE_explicitClause);
		try {
			State = 723;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 721;
				explDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 722;
				explRedef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplRedefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttrRefContext attrRef() {
			return GetRuleContext<AttrRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeSelContext collectionTypeSel() {
			return GetRuleContext<CollectionTypeSelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(ExpressParser.OPTIONAL, 0); }
		public ExplRedefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explRedef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterExplRedef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitExplRedef(this);
		}
	}

	[RuleVersion(0)]
	public ExplRedefContext explRedef() {
		ExplRedefContext _localctx = new ExplRedefContext(Context, State);
		EnterRule(_localctx, 120, RULE_explRedef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			attrRef();
			State = 726;
			Match(T__6);
			State = 728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONAL) {
				{
				State = 727;
				Match(OPTIONAL);
				}
			}

			State = 730;
			collectionTypeSel();
			State = 731;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext[] simpleExpr() {
			return GetRuleContexts<SimpleExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr(int i) {
			return GetRuleContext<SimpleExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(ExpressParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(ExpressParser.LIKE, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 122, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			simpleExpr();
			State = 736;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8355840L) != 0) || _la==IN || _la==LIKE) {
				{
				State = 734;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8355840L) != 0) || _la==IN || _la==LIKE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 735;
				simpleExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleFactorContext[] simpleFactor() {
			return GetRuleContexts<SimpleFactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleFactorContext simpleFactor(int i) {
			return GetRuleContext<SimpleFactorContext>(i);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 124, RULE_factor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738;
			simpleFactor();
			State = 741;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 739;
				Match(T__22);
				State = 740;
				simpleFactor();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamDefContext[] paramDef() {
			return GetRuleContexts<ParamDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamDefContext paramDef(int i) {
			return GetRuleContext<ParamDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnTypeChoiceContext returnTypeChoice() {
			return GetRuleContext<ReturnTypeChoiceContext>(0);
		}
		public FormalParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterFormalParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitFormalParam(this);
		}
	}

	[RuleVersion(0)]
	public FormalParamContext formalParam() {
		FormalParamContext _localctx = new FormalParamContext(Context, State);
		EnterRule(_localctx, 126, RULE_formalParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			paramDef();
			State = 748;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 744;
				Match(T__2);
				State = 745;
				paramDef();
				}
				}
				State = 750;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 751;
			Match(T__6);
			State = 752;
			returnTypeChoice();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParamContext[] formalParam() {
			return GetRuleContexts<FormalParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParamContext formalParam(int i) {
			return GetRuleContext<FormalParamContext>(i);
		}
		public FormalParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterFormalParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitFormalParams(this);
		}
	}

	[RuleVersion(0)]
	public FormalParamsContext formalParams() {
		FormalParamsContext _localctx = new FormalParamsContext(Context, State);
		EnterRule(_localctx, 128, RULE_formalParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			Match(T__0);
			State = 755;
			formalParam();
			State = 760;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 756;
				Match(T__7);
				State = 757;
				formalParam();
				}
				}
				State = 762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 763;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		public FuncDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterFuncDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitFuncDef(this);
		}
	}

	[RuleVersion(0)]
	public FuncDefContext funcDef() {
		FuncDefContext _localctx = new FuncDefContext(Context, State);
		EnterRule(_localctx, 130, RULE_funcDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			Match(SimpleId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(ExpressParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncDefContext funcDef() {
			return GetRuleContext<FuncDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnTypeChoiceContext returnTypeChoice() {
			return GetRuleContext<ReturnTypeChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParamsContext[] formalParams() {
			return GetRuleContexts<FormalParamsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParamsContext formalParams(int i) {
			return GetRuleContext<FormalParamsContext>(i);
		}
		public FuncHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterFuncHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitFuncHead(this);
		}
	}

	[RuleVersion(0)]
	public FuncHeadContext funcHead() {
		FuncHeadContext _localctx = new FuncHeadContext(Context, State);
		EnterRule(_localctx, 132, RULE_funcHead);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767;
			Match(FUNCTION);
			State = 768;
			funcDef();
			State = 772;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 769;
				formalParams();
				}
				}
				State = 774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 775;
			Match(T__6);
			State = 776;
			returnTypeChoice();
			State = 777;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeChoiceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AllTypeSelContext allTypeSel() {
			return GetRuleContext<AllTypeSelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		public ReturnTypeChoiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnTypeChoice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterReturnTypeChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitReturnTypeChoice(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeChoiceContext returnTypeChoice() {
		ReturnTypeChoiceContext _localctx = new ReturnTypeChoiceContext(Context, State);
		EnterRule(_localctx, 134, RULE_returnTypeChoice);
		try {
			State = 781;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 779;
				allTypeSel();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 780;
				collectionType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActualParamsContext actualParams() {
			return GetRuleContext<ActualParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDefContext funcDef() {
			return GetRuleContext<FuncDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StdFuncContext stdFunc() {
			return GetRuleContext<StdFuncContext>(0);
		}
		public FuncRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterFuncRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitFuncRef(this);
		}
	}

	[RuleVersion(0)]
	public FuncRefContext funcRef() {
		FuncRefContext _localctx = new FuncRefContext(Context, State);
		EnterRule(_localctx, 136, RULE_funcRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SimpleId:
				{
				State = 783;
				funcDef();
				}
				break;
			case ABS:
			case ACOS:
			case ASIN:
			case ATAN:
			case BLENGTH:
			case COS:
			case EXISTS:
			case EXP:
			case FORMAT:
			case HIBOUND:
			case HIINDEX:
			case LENGTH:
			case LOBOUND:
			case LOINDEX:
			case LOG:
			case LOG2:
			case LOG10:
			case NVL:
			case ODD:
			case ROLESOF:
			case SIN:
			case SIZEOF:
			case SQRT:
			case TAN:
			case TYPEOF:
			case USEDIN:
			case VALUE:
				{
				State = 784;
				stdFunc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 787;
			actualParams();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncHeadContext funcHead() {
			return GetRuleContext<FuncHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrologContext prolog() {
			return GetRuleContext<PrologContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_FUNCTION() { return GetToken(ExpressParser.END_FUNCTION, 0); }
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 138, RULE_functionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			funcHead();
			State = 790;
			prolog();
			State = 791;
			stmts();
			State = 792;
			Match(END_FUNCTION);
			State = 793;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERIC() { return GetToken(ExpressParser.GENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeLabelContext typeLabel() {
			return GetRuleContext<TypeLabelContext>(0);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterGenericType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitGenericType(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeContext genericType() {
		GenericTypeContext _localctx = new GenericTypeContext(Context, State);
		EnterRule(_localctx, 140, RULE_genericType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 795;
			Match(GENERIC);
			State = 798;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 796;
				Match(T__6);
				State = 797;
				typeLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ExpressParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ExpressParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext[] stmts() {
			return GetRuleContexts<StmtsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts(int i) {
			return GetRuleContext<StmtsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_IF() { return GetToken(ExpressParser.END_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ExpressParser.ELSE, 0); }
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 142, RULE_ifStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800;
			Match(IF);
			State = 801;
			expression();
			State = 802;
			Match(THEN);
			State = 803;
			stmts();
			State = 806;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 804;
				Match(ELSE);
				State = 805;
				stmts();
				}
			}

			State = 808;
			Match(END_IF);
			State = 809;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportEntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityRefContext entityRef() {
			return GetRuleContext<EntityRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(ExpressParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityDefContext entityDef() {
			return GetRuleContext<EntityDefContext>(0);
		}
		public ImportEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importEntity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterImportEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitImportEntity(this);
		}
	}

	[RuleVersion(0)]
	public ImportEntityContext importEntity() {
		ImportEntityContext _localctx = new ImportEntityContext(Context, State);
		EnterRule(_localctx, 144, RULE_importEntity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811;
			entityRef();
			State = 814;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 812;
				Match(AS);
				State = 813;
				entityDef();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportRefContext importRef() {
			return GetRuleContext<ImportRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(ExpressParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasDefContext aliasDef() {
			return GetRuleContext<AliasDefContext>(0);
		}
		public ImportItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterImportItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitImportItem(this);
		}
	}

	[RuleVersion(0)]
	public ImportItemContext importItem() {
		ImportItemContext _localctx = new ImportItemContext(Context, State);
		EnterRule(_localctx, 146, RULE_importItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816;
			importRef();
			State = 819;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 817;
				Match(AS);
				State = 818;
				aliasDef();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportItemContext[] importItem() {
			return GetRuleContexts<ImportItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportItemContext importItem(int i) {
			return GetRuleContext<ImportItemContext>(i);
		}
		public ImportListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterImportList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitImportList(this);
		}
	}

	[RuleVersion(0)]
	public ImportListContext importList() {
		ImportListContext _localctx = new ImportListContext(Context, State);
		EnterRule(_localctx, 148, RULE_importList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			Match(T__0);
			State = 822;
			importItem();
			State = 827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 823;
				Match(T__2);
				State = 824;
				importItem();
				}
				}
				State = 829;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 830;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantRefContext constantRef() {
			return GetRuleContext<ConstantRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityRefContext entityRef() {
			return GetRuleContext<EntityRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncRefContext funcRef() {
			return GetRuleContext<FuncRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcRefContext procRef() {
			return GetRuleContext<ProcRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public ImportRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterImportRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitImportRef(this);
		}
	}

	[RuleVersion(0)]
	public ImportRefContext importRef() {
		ImportRefContext _localctx = new ImportRefContext(Context, State);
		EnterRule(_localctx, 150, RULE_importRef);
		try {
			State = 837;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 832;
				constantRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 833;
				entityRef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 834;
				funcRef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 835;
				procRef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 836;
				typeRef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberExprContext numberExpr() {
			return GetRuleContext<NumberExprContext>(0);
		}
		public IncrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterIncr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitIncr(this);
		}
	}

	[RuleVersion(0)]
	public IncrContext incr() {
		IncrContext _localctx = new IncrContext(Context, State);
		EnterRule(_localctx, 152, RULE_incr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839;
			numberExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef() {
			return GetRuleContext<VarDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bound1Context bound1() {
			return GetRuleContext<Bound1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ExpressParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bound2Context bound2() {
			return GetRuleContext<Bound2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(ExpressParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IncrContext incr() {
			return GetRuleContext<IncrContext>(0);
		}
		public IncrementControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incrementControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterIncrementControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitIncrementControl(this);
		}
	}

	[RuleVersion(0)]
	public IncrementControlContext incrementControl() {
		IncrementControlContext _localctx = new IncrementControlContext(Context, State);
		EnterRule(_localctx, 154, RULE_incrementControl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 841;
			varDef();
			State = 842;
			Match(T__8);
			State = 843;
			bound1();
			State = 844;
			Match(TO);
			State = 845;
			bound2();
			State = 848;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BY) {
				{
				State = 846;
				Match(BY);
				State = 847;
				incr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(ExpressParser.UNKNOWN, 0); }
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(Context, State);
		EnterRule(_localctx, 156, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 850;
			Match(T__8);
			State = 854;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__4:
			case T__23:
			case T__27:
			case T__28:
			case T__29:
			case ABS:
			case ACOS:
			case ARRAY:
			case ASIN:
			case ATAN:
			case BLENGTH:
			case CONST_E:
			case COS:
			case EXISTS:
			case EXP:
			case FALSE:
			case FORMAT:
			case HIBOUND:
			case HIINDEX:
			case INSERT:
			case LENGTH:
			case LOBOUND:
			case LOINDEX:
			case LOG:
			case LOG2:
			case LOG10:
			case NOT:
			case NVL:
			case ODD:
			case PI:
			case QUERY:
			case REMOVE:
			case ROLESOF:
			case SELF:
			case SIN:
			case SIZEOF:
			case SQRT:
			case TAN:
			case TRUE:
			case TYPEOF:
			case USEDIN:
			case VALUE:
			case SimpleId:
			case Path:
			case IntegerLiteral:
			case BinaryLiteral:
			case LogicalLiteral:
			case RealLiteral:
			case StringLiteral:
				{
				State = 851;
				expression();
				}
				break;
			case T__9:
				{
				State = 852;
				Match(T__9);
				}
				break;
			case UNKNOWN:
				{
				State = 853;
				Match(UNKNOWN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(ExpressParser.INTEGER, 0); }
		public IntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterIntegerType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitIntegerType(this);
		}
	}

	[RuleVersion(0)]
	public IntegerTypeContext integerType() {
		IntegerTypeContext _localctx = new IntegerTypeContext(Context, State);
		EnterRule(_localctx, 158, RULE_integerType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceClauseContext referenceClause() {
			return GetRuleContext<ReferenceClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseClauseContext useClause() {
			return GetRuleContext<UseClauseContext>(0);
		}
		public InterfaceSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterInterfaceSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitInterfaceSpecification(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceSpecificationContext interfaceSpecification() {
		InterfaceSpecificationContext _localctx = new InterfaceSpecificationContext(Context, State);
		EnterRule(_localctx, 160, RULE_interfaceSpecification);
		try {
			State = 860;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REFERENCE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 858;
				referenceClause();
				}
				break;
			case USE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 859;
				useClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext[] simpleExpr() {
			return GetRuleContexts<SimpleExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr(int i) {
			return GetRuleContext<SimpleExprContext>(i);
		}
		public IntervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterInterval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitInterval(this);
		}
	}

	[RuleVersion(0)]
	public IntervalContext interval() {
		IntervalContext _localctx = new IntervalContext(Context, State);
		EnterRule(_localctx, 162, RULE_interval);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			Match(T__23);
			State = 863;
			simpleExpr();
			State = 864;
			_la = TokenStream.LA(1);
			if ( !(_la==T__14 || _la==T__16) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 865;
			simpleExpr();
			State = 866;
			_la = TokenStream.LA(1);
			if ( !(_la==T__14 || _la==T__16) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 867;
			simpleExpr();
			State = 868;
			Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InverseAttrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InverseDefContext inverseDef() {
			return GetRuleContext<InverseDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InverseRedefContext inverseRedef() {
			return GetRuleContext<InverseRedefContext>(0);
		}
		public InverseAttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inverseAttr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterInverseAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitInverseAttr(this);
		}
	}

	[RuleVersion(0)]
	public InverseAttrContext inverseAttr() {
		InverseAttrContext _localctx = new InverseAttrContext(Context, State);
		EnterRule(_localctx, 164, RULE_inverseAttr);
		try {
			State = 872;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 870;
				inverseDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 871;
				inverseRedef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InverseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVERSE() { return GetToken(ExpressParser.INVERSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InverseAttrContext[] inverseAttr() {
			return GetRuleContexts<InverseAttrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InverseAttrContext inverseAttr(int i) {
			return GetRuleContext<InverseAttrContext>(i);
		}
		public InverseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inverseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterInverseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitInverseClause(this);
		}
	}

	[RuleVersion(0)]
	public InverseClauseContext inverseClause() {
		InverseClauseContext _localctx = new InverseClauseContext(Context, State);
		EnterRule(_localctx, 166, RULE_inverseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874;
			Match(INVERSE);
			State = 878;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SimpleId || _la==Path) {
				{
				{
				State = 875;
				inverseAttr();
				}
				}
				State = 880;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InverseDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttrDefContext attrDef() {
			return GetRuleContext<AttrDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InverseTypeContext inverseType() {
			return GetRuleContext<InverseTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ExpressParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrRefContext attrRef() {
			return GetRuleContext<AttrRefContext>(0);
		}
		public InverseDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inverseDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterInverseDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitInverseDef(this);
		}
	}

	[RuleVersion(0)]
	public InverseDefContext inverseDef() {
		InverseDefContext _localctx = new InverseDefContext(Context, State);
		EnterRule(_localctx, 168, RULE_inverseDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881;
			attrDef();
			State = 882;
			Match(T__6);
			State = 883;
			inverseType();
			State = 884;
			Match(FOR);
			State = 885;
			attrRef();
			State = 886;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InverseRedefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttrRefContext[] attrRef() {
			return GetRuleContexts<AttrRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrRefContext attrRef(int i) {
			return GetRuleContext<AttrRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InverseTypeContext inverseType() {
			return GetRuleContext<InverseTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ExpressParser.FOR, 0); }
		public InverseRedefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inverseRedef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterInverseRedef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitInverseRedef(this);
		}
	}

	[RuleVersion(0)]
	public InverseRedefContext inverseRedef() {
		InverseRedefContext _localctx = new InverseRedefContext(Context, State);
		EnterRule(_localctx, 170, RULE_inverseRedef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 888;
			attrRef();
			State = 889;
			Match(T__7);
			State = 890;
			inverseType();
			State = 891;
			Match(FOR);
			State = 892;
			attrRef();
			State = 893;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InverseTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityRefContext entityRef() {
			return GetRuleContext<EntityRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(ExpressParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAG() { return GetToken(ExpressParser.BAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoundSpecContext boundSpec() {
			return GetRuleContext<BoundSpecContext>(0);
		}
		public InverseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inverseType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterInverseType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitInverseType(this);
		}
	}

	[RuleVersion(0)]
	public InverseTypeContext inverseType() {
		InverseTypeContext _localctx = new InverseTypeContext(Context, State);
		EnterRule(_localctx, 172, RULE_inverseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 900;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BAG || _la==SET) {
				{
				State = 895;
				_la = TokenStream.LA(1);
				if ( !(_la==BAG || _la==SET) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 896;
					boundSpec();
					}
				}

				State = 899;
				Match(OF);
				}
			}

			State = 902;
			entityRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		public LabelDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterLabelDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitLabelDef(this);
		}
	}

	[RuleVersion(0)]
	public LabelDefContext labelDef() {
		LabelDefContext _localctx = new LabelDefContext(Context, State);
		EnterRule(_localctx, 174, RULE_labelDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 904;
			Match(SimpleId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(ExpressParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeSelContext collectionTypeSel() {
			return GetRuleContext<CollectionTypeSelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoundSpecContext boundSpec() {
			return GetRuleContext<BoundSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(ExpressParser.UNIQUE, 0); }
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(Context, State);
		EnterRule(_localctx, 176, RULE_listType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 906;
			Match(LIST);
			State = 908;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 907;
				boundSpec();
				}
			}

			State = 910;
			Match(OF);
			State = 912;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE) {
				{
				State = 911;
				Match(UNIQUE);
				}
			}

			State = 914;
			collectionTypeSel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryLiteral() { return GetToken(ExpressParser.BinaryLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(ExpressParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalLiteral() { return GetToken(ExpressParser.LogicalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RealLiteral() { return GetToken(ExpressParser.RealLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(ExpressParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AggregateLiteralContext aggregateLiteral() {
			return GetRuleContext<AggregateLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityLiteralContext entityLiteral() {
			return GetRuleContext<EntityLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 178, RULE_literal);
		try {
			State = 923;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BinaryLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 916;
				Match(BinaryLiteral);
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 917;
				Match(IntegerLiteral);
				}
				break;
			case LogicalLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 918;
				Match(LogicalLiteral);
				}
				break;
			case RealLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 919;
				Match(RealLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 920;
				Match(StringLiteral);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 6);
				{
				State = 921;
				aggregateLiteral();
				}
				break;
			case SimpleId:
				EnterOuterAlt(_localctx, 7);
				{
				State = 922;
				entityLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(ExpressParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_LOCAL() { return GetToken(ExpressParser.END_LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocalVarContext[] localVar() {
			return GetRuleContexts<LocalVarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVarContext localVar(int i) {
			return GetRuleContext<LocalVarContext>(i);
		}
		public LocalDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterLocalDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitLocalDecl(this);
		}
	}

	[RuleVersion(0)]
	public LocalDeclContext localDecl() {
		LocalDeclContext _localctx = new LocalDeclContext(Context, State);
		EnterRule(_localctx, 180, RULE_localDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 925;
			Match(LOCAL);
			State = 929;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SimpleId) {
				{
				{
				State = 926;
				localVar();
				}
				}
				State = 931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 932;
			Match(END_LOCAL);
			State = 933;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalRulesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UniqueRulesContext uniqueRules() {
			return GetRuleContext<UniqueRulesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DomainRulesContext domainRules() {
			return GetRuleContext<DomainRulesContext>(0);
		}
		public LocalRulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localRules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterLocalRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitLocalRules(this);
		}
	}

	[RuleVersion(0)]
	public LocalRulesContext localRules() {
		LocalRulesContext _localctx = new LocalRulesContext(Context, State);
		EnterRule(_localctx, 182, RULE_localRules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 936;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE) {
				{
				State = 935;
				uniqueRules();
				}
			}

			State = 939;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 938;
				domainRules();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext[] varDef() {
			return GetRuleContexts<VarDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef(int i) {
			return GetRuleContext<VarDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeSelContext collectionTypeSel() {
			return GetRuleContext<CollectionTypeSelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConformantTypeContext conformantType() {
			return GetRuleContext<ConformantTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		public LocalVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterLocalVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitLocalVar(this);
		}
	}

	[RuleVersion(0)]
	public LocalVarContext localVar() {
		LocalVarContext _localctx = new LocalVarContext(Context, State);
		EnterRule(_localctx, 184, RULE_localVar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941;
			varDef();
			State = 946;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 942;
				Match(T__2);
				State = 943;
				varDef();
				}
				}
				State = 948;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 949;
			Match(T__6);
			State = 952;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 950;
				collectionTypeSel();
				}
				break;
			case 2:
				{
				State = 951;
				conformantType();
				}
				break;
			}
			State = 955;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 954;
				init();
				}
			}

			State = 957;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LogicalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterLogicalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitLogicalExpr(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExprContext logicalExpr() {
		LogicalExprContext _localctx = new LogicalExprContext(Context, State);
		EnterRule(_localctx, 186, RULE_logicalExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 959;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL() { return GetToken(ExpressParser.LOGICAL, 0); }
		public LogicalTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterLogicalType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitLogicalType(this);
		}
	}

	[RuleVersion(0)]
	public LogicalTypeContext logicalType() {
		LogicalTypeContext _localctx = new LogicalTypeContext(Context, State);
		EnterRule(_localctx, 188, RULE_logicalType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961;
			Match(LOGICAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityRefContext entityRef() {
			return GetRuleContext<EntityRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public NamedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterNamedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitNamedType(this);
		}
	}

	[RuleVersion(0)]
	public NamedTypeContext namedType() {
		NamedTypeContext _localctx = new NamedTypeContext(Context, State);
		EnterRule(_localctx, 190, RULE_namedType);
		try {
			State = 965;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 963;
				entityRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 964;
				typeRef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullStmtContext : ParserRuleContext {
		public NullStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterNullStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitNullStmt(this);
		}
	}

	[RuleVersion(0)]
	public NullStmtContext nullStmt() {
		NullStmtContext _localctx = new NullStmtContext(Context, State);
		EnterRule(_localctx, 192, RULE_nullStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 967;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public NumberExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterNumberExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitNumberExpr(this);
		}
	}

	[RuleVersion(0)]
	public NumberExprContext numberExpr() {
		NumberExprContext _localctx = new NumberExprContext(Context, State);
		EnterRule(_localctx, 194, RULE_numberExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969;
			simpleExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ExpressParser.NUMBER, 0); }
		public NumberTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterNumberType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitNumberType(this);
		}
	}

	[RuleVersion(0)]
	public NumberTypeContext numberType() {
		NumberTypeContext _localctx = new NumberTypeContext(Context, State);
		EnterRule(_localctx, 196, RULE_numberType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERWISE() { return GetToken(ExpressParser.OTHERWISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public OtherActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterOtherAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitOtherAction(this);
		}
	}

	[RuleVersion(0)]
	public OtherActionContext otherAction() {
		OtherActionContext _localctx = new OtherActionContext(Context, State);
		EnterRule(_localctx, 198, RULE_otherAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973;
			Match(OTHERWISE);
			State = 974;
			Match(T__6);
			State = 975;
			stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		public ParamDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterParamDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitParamDef(this);
		}
	}

	[RuleVersion(0)]
	public ParamDefContext paramDef() {
		ParamDefContext _localctx = new ParamDefContext(Context, State);
		EnterRule(_localctx, 200, RULE_paramDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 977;
			Match(SimpleId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 202, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		public ParamRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterParamRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitParamRef(this);
		}
	}

	[RuleVersion(0)]
	public ParamRefContext paramRef() {
		ParamRefContext _localctx = new ParamRefContext(Context, State);
		EnterRule(_localctx, 204, RULE_paramRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 981;
			Match(SimpleId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecisionSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberExprContext numberExpr() {
			return GetRuleContext<NumberExprContext>(0);
		}
		public PrecisionSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precisionSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterPrecisionSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitPrecisionSpec(this);
		}
	}

	[RuleVersion(0)]
	public PrecisionSpecContext precisionSpec() {
		PrecisionSpecContext _localctx = new PrecisionSpecContext(Context, State);
		EnterRule(_localctx, 206, RULE_precisionSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 983;
			numberExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcCallStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcRefContext procRef() {
			return GetRuleContext<ProcRefContext>(0);
		}
		public ProcCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procCallStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterProcCallStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitProcCallStmt(this);
		}
	}

	[RuleVersion(0)]
	public ProcCallStmtContext procCallStmt() {
		ProcCallStmtContext _localctx = new ProcCallStmtContext(Context, State);
		EnterRule(_localctx, 208, RULE_procCallStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 985;
			procRef();
			State = 986;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		public ProcDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterProcDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitProcDef(this);
		}
	}

	[RuleVersion(0)]
	public ProcDefContext procDef() {
		ProcDefContext _localctx = new ProcDefContext(Context, State);
		EnterRule(_localctx, 210, RULE_procDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 988;
			Match(SimpleId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcHeadContext procHead() {
			return GetRuleContext<ProcHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrologContext prolog() {
			return GetRuleContext<PrologContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_PROCEDURE() { return GetToken(ExpressParser.END_PROCEDURE, 0); }
		public ProcedureDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterProcedureDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitProcedureDecl(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDeclContext procedureDecl() {
		ProcedureDeclContext _localctx = new ProcedureDeclContext(Context, State);
		EnterRule(_localctx, 212, RULE_procedureDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 990;
			procHead();
			State = 991;
			prolog();
			State = 992;
			stmts();
			State = 993;
			Match(END_PROCEDURE);
			State = 994;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(ExpressParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcDefContext procDef() {
			return GetRuleContext<ProcDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarParamsContext varParams() {
			return GetRuleContext<VarParamsContext>(0);
		}
		public ProcHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterProcHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitProcHead(this);
		}
	}

	[RuleVersion(0)]
	public ProcHeadContext procHead() {
		ProcHeadContext _localctx = new ProcHeadContext(Context, State);
		EnterRule(_localctx, 214, RULE_procHead);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 996;
			Match(PROCEDURE);
			State = 997;
			procDef();
			State = 999;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 998;
				varParams();
				}
			}

			State = 1001;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActualParamsContext actualParams() {
			return GetRuleContext<ActualParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcDefContext procDef() {
			return GetRuleContext<ProcDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StdProcContext stdProc() {
			return GetRuleContext<StdProcContext>(0);
		}
		public ProcRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterProcRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitProcRef(this);
		}
	}

	[RuleVersion(0)]
	public ProcRefContext procRef() {
		ProcRefContext _localctx = new ProcRefContext(Context, State);
		EnterRule(_localctx, 216, RULE_procRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1005;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SimpleId:
				{
				State = 1003;
				procDef();
				}
				break;
			case INSERT:
			case REMOVE:
				{
				State = 1004;
				stdProc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1007;
			actualParams();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrologContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclContext constantDecl() {
			return GetRuleContext<ConstantDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalDeclContext localDecl() {
			return GetRuleContext<LocalDeclContext>(0);
		}
		public PrologContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prolog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterProlog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitProlog(this);
		}
	}

	[RuleVersion(0)]
	public PrologContext prolog() {
		PrologContext _localctx = new PrologContext(Context, State);
		EnterRule(_localctx, 218, RULE_prolog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1012;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 1099511628801L) != 0) || _la==TYPE) {
				{
				{
				State = 1009;
				declaration();
				}
				}
				State = 1014;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1016;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTANT) {
				{
				State = 1015;
				constantDecl();
				}
			}

			State = 1019;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL) {
				{
				State = 1018;
				localDecl();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudoTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AggregateTypeContext aggregateType() {
			return GetRuleContext<AggregateTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public PseudoTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudoType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterPseudoType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitPseudoType(this);
		}
	}

	[RuleVersion(0)]
	public PseudoTypeContext pseudoType() {
		PseudoTypeContext _localctx = new PseudoTypeContext(Context, State);
		EnterRule(_localctx, 220, RULE_pseudoType);
		try {
			State = 1023;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AGGREGATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1021;
				aggregateType();
				}
				break;
			case GENERIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1022;
				genericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext[] subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrRefContext[] attrRef() {
			return GetRuleContexts<AttrRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrRefContext attrRef(int i) {
			return GetRuleContext<AttrRefContext>(i);
		}
		public QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitQualifier(this);
		}
	}

	[RuleVersion(0)]
	public QualifierContext qualifier() {
		QualifierContext _localctx = new QualifierContext(Context, State);
		EnterRule(_localctx, 222, RULE_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1030;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4 || _la==T__13) {
				{
				State = 1028;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__13:
					{
					{
					State = 1025;
					Match(T__13);
					State = 1026;
					attrRef();
					}
					}
					break;
				case T__4:
					{
					State = 1027;
					subscript();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef() {
			return GetRuleContext<VarDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggregateExprContext aggregateExpr() {
			return GetRuleContext<AggregateExprContext>(0);
		}
		public QueryAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterQueryAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitQueryAssignment(this);
		}
	}

	[RuleVersion(0)]
	public QueryAssignmentContext queryAssignment() {
		QueryAssignmentContext _localctx = new QueryAssignmentContext(Context, State);
		EnterRule(_localctx, 224, RULE_queryAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1033;
			varDef();
			State = 1034;
			Match(T__25);
			State = 1035;
			aggregateExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(ExpressParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryAssignmentContext queryAssignment() {
			return GetRuleContext<QueryAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryScanContext queryScan() {
			return GetRuleContext<QueryScanContext>(0);
		}
		public QueryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterQueryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitQueryExpr(this);
		}
	}

	[RuleVersion(0)]
	public QueryExprContext queryExpr() {
		QueryExprContext _localctx = new QueryExprContext(Context, State);
		EnterRule(_localctx, 226, RULE_queryExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1037;
			Match(QUERY);
			State = 1038;
			Match(T__0);
			State = 1039;
			queryAssignment();
			State = 1040;
			Match(T__26);
			State = 1041;
			queryScan();
			State = 1042;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryScanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExprContext logicalExpr() {
			return GetRuleContext<LogicalExprContext>(0);
		}
		public QueryScanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryScan; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterQueryScan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitQueryScan(this);
		}
	}

	[RuleVersion(0)]
	public QueryScanContext queryScan() {
		QueryScanContext _localctx = new QueryScanContext(Context, State);
		EnterRule(_localctx, 228, RULE_queryScan);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1044;
			logicalExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(ExpressParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrecisionSpecContext precisionSpec() {
			return GetRuleContext<PrecisionSpecContext>(0);
		}
		public RealTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterRealType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitRealType(this);
		}
	}

	[RuleVersion(0)]
	public RealTypeContext realType() {
		RealTypeContext _localctx = new RealTypeContext(Context, State);
		EnterRule(_localctx, 230, RULE_realType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1046;
			Match(REAL);
			State = 1051;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 1047;
				Match(T__0);
				State = 1048;
				precisionSpec();
				State = 1049;
				Match(T__3);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(ExpressParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(ExpressParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportListContext importList() {
			return GetRuleContext<ImportListContext>(0);
		}
		public ReferenceClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterReferenceClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitReferenceClause(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceClauseContext referenceClause() {
		ReferenceClauseContext _localctx = new ReferenceClauseContext(Context, State);
		EnterRule(_localctx, 232, RULE_referenceClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1053;
			Match(REFERENCE);
			State = 1054;
			Match(FROM);
			State = 1055;
			schemaRef();
			State = 1057;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 1056;
				importList();
				}
			}

			State = 1059;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferencedAttrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttrRefContext attrRef() {
			return GetRuleContext<AttrRefContext>(0);
		}
		public ReferencedAttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referencedAttr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterReferencedAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitReferencedAttr(this);
		}
	}

	[RuleVersion(0)]
	public ReferencedAttrContext referencedAttr() {
		ReferencedAttrContext _localctx = new ReferencedAttrContext(Context, State);
		EnterRule(_localctx, 234, RULE_referencedAttr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1061;
			attrRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemarkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EmbeddedRemarkContext embeddedRemark() {
			return GetRuleContext<EmbeddedRemarkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TailRemarkContext tailRemark() {
			return GetRuleContext<TailRemarkContext>(0);
		}
		public RemarkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remark; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterRemark(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitRemark(this);
		}
	}

	[RuleVersion(0)]
	public RemarkContext remark() {
		RemarkContext _localctx = new RemarkContext(Context, State);
		EnterRule(_localctx, 236, RULE_remark);
		try {
			State = 1065;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1063;
				embeddedRemark();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1064;
				tailRemark();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemarkStuffContext : ParserRuleContext {
		public RemarkStuffContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remarkStuff; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterRemarkStuff(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitRemarkStuff(this);
		}
	}

	[RuleVersion(0)]
	public RemarkStuffContext remarkStuff() {
		RemarkStuffContext _localctx = new RemarkStuffContext(Context, State);
		EnterRule(_localctx, 238, RULE_remarkStuff);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1067;
			MatchWildcard();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IncrementControlContext incrementControl() {
			return GetRuleContext<IncrementControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileControlContext whileControl() {
			return GetRuleContext<WhileControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilControlContext untilControl() {
			return GetRuleContext<UntilControlContext>(0);
		}
		public RepeatControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterRepeatControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitRepeatControl(this);
		}
	}

	[RuleVersion(0)]
	public RepeatControlContext repeatControl() {
		RepeatControlContext _localctx = new RepeatControlContext(Context, State);
		EnterRule(_localctx, 240, RULE_repeatControl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SimpleId) {
				{
				State = 1069;
				incrementControl();
				}
			}

			State = 1073;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHILE) {
				{
				State = 1072;
				whileControl();
				}
			}

			State = 1076;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNTIL) {
				{
				State = 1075;
				untilControl();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeateStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(ExpressParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RepeatControlContext repeatControl() {
			return GetRuleContext<RepeatControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_REPEAT() { return GetToken(ExpressParser.END_REPEAT, 0); }
		public RepeateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeateStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterRepeateStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitRepeateStmt(this);
		}
	}

	[RuleVersion(0)]
	public RepeateStmtContext repeateStmt() {
		RepeateStmtContext _localctx = new RepeateStmtContext(Context, State);
		EnterRule(_localctx, 242, RULE_repeateStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1078;
			Match(REPEAT);
			State = 1079;
			repeatControl();
			State = 1080;
			Match(T__7);
			State = 1081;
			stmts();
			State = 1082;
			Match(END_REPEAT);
			State = 1083;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepetitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberExprContext numberExpr() {
			return GetRuleContext<NumberExprContext>(0);
		}
		public RepetitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repetition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterRepetition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitRepetition(this);
		}
	}

	[RuleVersion(0)]
	public RepetitionContext repetition() {
		RepetitionContext _localctx = new RepetitionContext(Context, State);
		EnterRule(_localctx, 244, RULE_repetition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1085;
			numberExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ExpressParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(ExpressParser.UNKNOWN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 246, RULE_returnStmt);
		int _la;
		try {
			State = 1102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1087;
				Match(RETURN);
				State = 1092;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 1088;
					Match(T__0);
					State = 1089;
					expression();
					State = 1090;
					Match(T__3);
					}
				}

				State = 1094;
				Match(T__7);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1095;
				Match(RETURN);
				State = 1099;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 1096;
					Match(T__0);
					State = 1097;
					Match(UNKNOWN);
					State = 1098;
					Match(T__3);
					}
				}

				State = 1101;
				Match(T__7);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleHeadContext ruleHead() {
			return GetRuleContext<RuleHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrologContext prolog() {
			return GetRuleContext<PrologContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DomainRulesContext domainRules() {
			return GetRuleContext<DomainRulesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_RULE() { return GetToken(ExpressParser.END_RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public RuleDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterRuleDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitRuleDecl(this);
		}
	}

	[RuleVersion(0)]
	public RuleDeclContext ruleDecl() {
		RuleDeclContext _localctx = new RuleDeclContext(Context, State);
		EnterRule(_localctx, 248, RULE_ruleDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1104;
			ruleHead();
			State = 1105;
			prolog();
			State = 1107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 29651991428858112L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & -8900735602056340409L) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & 387L) != 0)) {
				{
				State = 1106;
				stmts();
				}
			}

			State = 1109;
			domainRules();
			State = 1110;
			Match(END_RULE);
			State = 1111;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		public RuleDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterRuleDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitRuleDef(this);
		}
	}

	[RuleVersion(0)]
	public RuleDefContext ruleDef() {
		RuleDefContext _localctx = new RuleDefContext(Context, State);
		EnterRule(_localctx, 250, RULE_ruleDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113;
			Match(SimpleId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(ExpressParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RuleDefContext ruleDef() {
			return GetRuleContext<RuleDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ExpressParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RuleListContext ruleList() {
			return GetRuleContext<RuleListContext>(0);
		}
		public RuleHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterRuleHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitRuleHead(this);
		}
	}

	[RuleVersion(0)]
	public RuleHeadContext ruleHead() {
		RuleHeadContext _localctx = new RuleHeadContext(Context, State);
		EnterRule(_localctx, 252, RULE_ruleHead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1115;
			Match(RULE);
			State = 1116;
			ruleDef();
			State = 1117;
			Match(FOR);
			State = 1118;
			ruleList();
			State = 1119;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityRefContext[] entityRef() {
			return GetRuleContexts<EntityRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityRefContext entityRef(int i) {
			return GetRuleContext<EntityRefContext>(i);
		}
		public RuleListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterRuleList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitRuleList(this);
		}
	}

	[RuleVersion(0)]
	public RuleListContext ruleList() {
		RuleListContext _localctx = new RuleListContext(Context, State);
		EnterRule(_localctx, 254, RULE_ruleList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121;
			Match(T__0);
			State = 1122;
			entityRef();
			State = 1127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 1123;
				Match(T__2);
				State = 1124;
				entityRef();
				}
				}
				State = 1129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1130;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceSpecificationContext[] interfaceSpecification() {
			return GetRuleContexts<InterfaceSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceSpecificationContext interfaceSpecification(int i) {
			return GetRuleContext<InterfaceSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclContext constantDecl() {
			return GetRuleContext<ConstantDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleDeclContext[] ruleDecl() {
			return GetRuleContexts<RuleDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleDeclContext ruleDecl(int i) {
			return GetRuleContext<RuleDeclContext>(i);
		}
		public SchemaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSchemaBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSchemaBody(this);
		}
	}

	[RuleVersion(0)]
	public SchemaBodyContext schemaBody() {
		SchemaBodyContext _localctx = new SchemaBodyContext(Context, State);
		EnterRule(_localctx, 256, RULE_schemaBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==REFERENCE || _la==USE) {
				{
				{
				State = 1132;
				interfaceSpecification();
				}
				}
				State = 1137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTANT) {
				{
				State = 1138;
				constantDecl();
				}
			}

			State = 1145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 282574488339457L) != 0) || _la==TYPE) {
				{
				State = 1143;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ENTITY:
				case FUNCTION:
				case PROCEDURE:
				case TYPE:
					{
					State = 1141;
					declaration();
					}
					break;
				case RULE:
					{
					State = 1142;
					ruleDecl();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(ExpressParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SchemaDef() { return GetToken(ExpressParser.SchemaDef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaBodyContext schemaBody() {
			return GetRuleContext<SchemaBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SCHEMA() { return GetToken(ExpressParser.END_SCHEMA, 0); }
		public SchemaDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSchemaDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSchemaDecl(this);
		}
	}

	[RuleVersion(0)]
	public SchemaDeclContext schemaDecl() {
		SchemaDeclContext _localctx = new SchemaDeclContext(Context, State);
		EnterRule(_localctx, 258, RULE_schemaDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1148;
			Match(SCHEMA);
			State = 1149;
			Match(SchemaDef);
			State = 1150;
			Match(T__7);
			State = 1151;
			schemaBody();
			State = 1152;
			Match(END_SCHEMA);
			State = 1153;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		public SchemaRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSchemaRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSchemaRef(this);
		}
	}

	[RuleVersion(0)]
	public SchemaRefContext schemaRef() {
		SchemaRefContext _localctx = new SchemaRefContext(Context, State);
		EnterRule(_localctx, 260, RULE_schemaRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1155;
			Match(SimpleId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSelector(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 262, RULE_selector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1157;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(ExpressParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectValuesContext selectValues() {
			return GetRuleContext<SelectValuesContext>(0);
		}
		public SelectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSelectType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSelectType(this);
		}
	}

	[RuleVersion(0)]
	public SelectTypeContext selectType() {
		SelectTypeContext _localctx = new SelectTypeContext(Context, State);
		EnterRule(_localctx, 264, RULE_selectType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1159;
			Match(SELECT);
			State = 1160;
			Match(T__0);
			State = 1161;
			selectValues();
			State = 1162;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedTypeContext[] namedType() {
			return GetRuleContexts<NamedTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedTypeContext namedType(int i) {
			return GetRuleContext<NamedTypeContext>(i);
		}
		public SelectValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectValues; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSelectValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSelectValues(this);
		}
	}

	[RuleVersion(0)]
	public SelectValuesContext selectValues() {
		SelectValuesContext _localctx = new SelectValuesContext(Context, State);
		EnterRule(_localctx, 266, RULE_selectValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1164;
			namedType();
			State = 1169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 1165;
				Match(T__2);
				State = 1166;
				namedType();
				}
				}
				State = 1171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(ExpressParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoundSpecContext boundSpec() {
			return GetRuleContext<BoundSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeSelContext collectionTypeSel() {
			return GetRuleContext<CollectionTypeSelContext>(0);
		}
		public SetTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSetType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSetType(this);
		}
	}

	[RuleVersion(0)]
	public SetTypeContext setType() {
		SetTypeContext _localctx = new SetTypeContext(Context, State);
		EnterRule(_localctx, 268, RULE_setType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1172;
			Match(SET);
			State = 1173;
			boundSpec();
			State = 1174;
			Match(OF);
			State = 1175;
			collectionTypeSel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(ExpressParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(ExpressParser.OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] XOR() { return GetTokens(ExpressParser.XOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR(int i) {
			return GetToken(ExpressParser.XOR, i);
		}
		public SimpleExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSimpleExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSimpleExpr(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExprContext simpleExpr() {
		SimpleExprContext _localctx = new SimpleExprContext(Context, State);
		EnterRule(_localctx, 270, RULE_simpleExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1177;
			term();
			State = 1182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__27 || _la==T__28 || _la==OR || _la==XOR) {
				{
				{
				State = 1178;
				_la = TokenStream.LA(1);
				if ( !(_la==T__27 || _la==T__28 || _la==OR || _la==XOR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1179;
				term();
				}
				}
				State = 1184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleFactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Path() { return GetToken(ExpressParser.Path, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExprContext queryExpr() {
			return GetRuleContext<QueryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleFactorContext simpleFactor() {
			return GetRuleContext<SimpleFactorContext>(0);
		}
		public SimpleFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleFactor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSimpleFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSimpleFactor(this);
		}
	}

	[RuleVersion(0)]
	public SimpleFactorContext simpleFactor() {
		SimpleFactorContext _localctx = new SimpleFactorContext(Context, State);
		EnterRule(_localctx, 272, RULE_simpleFactor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				{
				State = 1185;
				Match(Path);
				}
				break;
			case 2:
				{
				State = 1186;
				literal();
				}
				break;
			case 3:
				{
				State = 1187;
				varRef();
				}
				break;
			case 4:
				{
				State = 1188;
				interval();
				}
				break;
			case 5:
				{
				State = 1189;
				queryExpr();
				}
				break;
			case 6:
				{
				State = 1190;
				Match(T__0);
				State = 1191;
				expression();
				State = 1192;
				Match(T__3);
				}
				break;
			case 7:
				{
				State = 1194;
				unaryOp();
				State = 1195;
				simpleFactor();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryTypeContext binaryType() {
			return GetRuleContext<BinaryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanTypeContext booleanType() {
			return GetRuleContext<BooleanTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalTypeContext logicalType() {
			return GetRuleContext<LogicalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberTypeContext numberType() {
			return GetRuleContext<NumberTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealTypeContext realType() {
			return GetRuleContext<RealTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeContext stringType() {
			return GetRuleContext<StringTypeContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 274, RULE_simpleType);
		try {
			State = 1206;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1199;
				binaryType();
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1200;
				booleanType();
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1201;
				integerType();
				}
				break;
			case LOGICAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1202;
				logicalType();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1203;
				numberType();
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1204;
				realType();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1205;
				stringType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP2() { return GetToken(ExpressParser.SKIP2, 0); }
		public SkipStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skipStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSkipStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSkipStmt(this);
		}
	}

	[RuleVersion(0)]
	public SkipStmtContext skipStmt() {
		SkipStmtContext _localctx = new SkipStmtContext(Context, State);
		EnterRule(_localctx, 276, RULE_skipStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1208;
			Match(SKIP2);
			State = 1209;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StdConstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST_E() { return GetToken(ExpressParser.CONST_E, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PI() { return GetToken(ExpressParser.PI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(ExpressParser.SELF, 0); }
		public StdConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stdConst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterStdConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitStdConst(this);
		}
	}

	[RuleVersion(0)]
	public StdConstContext stdConst() {
		StdConstContext _localctx = new StdConstContext(Context, State);
		EnterRule(_localctx, 278, RULE_stdConst);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1211;
			_la = TokenStream.LA(1);
			if ( !(_la==T__29 || _la==CONST_E || _la==PI || _la==SELF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StdFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(ExpressParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOS() { return GetToken(ExpressParser.ACOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIN() { return GetToken(ExpressParser.ASIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN() { return GetToken(ExpressParser.ATAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLENGTH() { return GetToken(ExpressParser.BLENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COS() { return GetToken(ExpressParser.COS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(ExpressParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP() { return GetToken(ExpressParser.EXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(ExpressParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIBOUND() { return GetToken(ExpressParser.HIBOUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIINDEX() { return GetToken(ExpressParser.HIINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LENGTH() { return GetToken(ExpressParser.LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOBOUND() { return GetToken(ExpressParser.LOBOUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOINDEX() { return GetToken(ExpressParser.LOINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(ExpressParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG2() { return GetToken(ExpressParser.LOG2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG10() { return GetToken(ExpressParser.LOG10, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NVL() { return GetToken(ExpressParser.NVL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ODD() { return GetToken(ExpressParser.ODD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLESOF() { return GetToken(ExpressParser.ROLESOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIN() { return GetToken(ExpressParser.SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZEOF() { return GetToken(ExpressParser.SIZEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQRT() { return GetToken(ExpressParser.SQRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAN() { return GetToken(ExpressParser.TAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEOF() { return GetToken(ExpressParser.TYPEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USEDIN() { return GetToken(ExpressParser.USEDIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(ExpressParser.VALUE, 0); }
		public StdFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stdFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterStdFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitStdFunc(this);
		}
	}

	[RuleVersion(0)]
	public StdFuncContext stdFunc() {
		StdFuncContext _localctx = new StdFuncContext(Context, State);
		EnterRule(_localctx, 280, RULE_stdFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1213;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & -2232058082407463419L) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & 26672486154339L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StdProcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(ExpressParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(ExpressParser.REMOVE, 0); }
		public StdProcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stdProc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterStdProc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitStdProc(this);
		}
	}

	[RuleVersion(0)]
	public StdProcContext stdProc() {
		StdProcContext _localctx = new StdProcContext(Context, State);
		EnterRule(_localctx, 282, RULE_stdProc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1215;
			_la = TokenStream.LA(1);
			if ( !(_la==INSERT || _la==REMOVE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasStmtContext aliasStmt() {
			return GetRuleContext<AliasStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStmtContext assignmentStmt() {
			return GetRuleContext<AssignmentStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStmtContext caseStmt() {
			return GetRuleContext<CaseStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStmtContext compoundStmt() {
			return GetRuleContext<CompoundStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EscapeStmtContext escapeStmt() {
			return GetRuleContext<EscapeStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullStmtContext nullStmt() {
			return GetRuleContext<NullStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcCallStmtContext procCallStmt() {
			return GetRuleContext<ProcCallStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeateStmtContext repeateStmt() {
			return GetRuleContext<RepeateStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkipStmtContext skipStmt() {
			return GetRuleContext<SkipStmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 284, RULE_stmt);
		try {
			State = 1228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1217;
				aliasStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1218;
				assignmentStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1219;
				caseStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1220;
				compoundStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1221;
				escapeStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1222;
				ifStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1223;
				nullStmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1224;
				procCallStmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1225;
				repeateStmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1226;
				returnStmt();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1227;
				skipStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitStmts(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 286, RULE_stmts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1230;
			stmt();
			State = 1234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 29651991428858112L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & -8900735602056340409L) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & 387L) != 0)) {
				{
				{
				State = 1231;
				stmt();
				}
				}
				State = 1236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ExpressParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WidthContext width() {
			return GetRuleContext<WidthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(ExpressParser.FIXED, 0); }
		public StringTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterStringType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitStringType(this);
		}
	}

	[RuleVersion(0)]
	public StringTypeContext stringType() {
		StringTypeContext _localctx = new StringTypeContext(Context, State);
		EnterRule(_localctx, 288, RULE_stringType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1237;
			Match(STRING);
			State = 1244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 1238;
				Match(T__0);
				State = 1239;
				width();
				State = 1240;
				Match(T__3);
				State = 1242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FIXED) {
					{
					State = 1241;
					Match(FIXED);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubSuperContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SupertypeDeclContext supertypeDecl() {
			return GetRuleContext<SupertypeDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubtypeDeclContext subtypeDecl() {
			return GetRuleContext<SubtypeDeclContext>(0);
		}
		public SubSuperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subSuper; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSubSuper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSubSuper(this);
		}
	}

	[RuleVersion(0)]
	public SubSuperContext subSuper() {
		SubSuperContext _localctx = new SubSuperContext(Context, State);
		EnterRule(_localctx, 290, RULE_subSuper);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ABSTRACT || _la==SUPERTYPE) {
				{
				State = 1246;
				supertypeDecl();
				}
			}

			State = 1250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUBTYPE) {
				{
				State = 1249;
				subtypeDecl();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberExprContext[] numberExpr() {
			return GetRuleContexts<NumberExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberExprContext numberExpr(int i) {
			return GetRuleContext<NumberExprContext>(i);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 292, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 1252;
				Match(T__4);
				State = 1253;
				numberExpr();
				State = 1254;
				Match(T__5);
				}
				break;
			case 2:
				{
				State = 1256;
				Match(T__4);
				State = 1257;
				numberExpr();
				State = 1258;
				Match(T__6);
				State = 1259;
				numberExpr();
				State = 1260;
				Match(T__5);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtypeDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTYPE() { return GetToken(ExpressParser.SUBTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityRefContext[] entityRef() {
			return GetRuleContexts<EntityRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityRefContext entityRef(int i) {
			return GetRuleContext<EntityRefContext>(i);
		}
		public SubtypeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtypeDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSubtypeDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSubtypeDecl(this);
		}
	}

	[RuleVersion(0)]
	public SubtypeDeclContext subtypeDecl() {
		SubtypeDeclContext _localctx = new SubtypeDeclContext(Context, State);
		EnterRule(_localctx, 294, RULE_subtypeDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1264;
			Match(SUBTYPE);
			State = 1265;
			Match(OF);
			State = 1266;
			Match(T__0);
			State = 1267;
			entityRef();
			State = 1272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 1268;
				Match(T__2);
				State = 1269;
				entityRef();
				}
				}
				State = 1274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1275;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupertypeDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(ExpressParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPERTYPE() { return GetToken(ExpressParser.SUPERTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(ExpressParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SupertypeExprContext supertypeExpr() {
			return GetRuleContext<SupertypeExprContext>(0);
		}
		public SupertypeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supertypeDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSupertypeDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSupertypeDecl(this);
		}
	}

	[RuleVersion(0)]
	public SupertypeDeclContext supertypeDecl() {
		SupertypeDeclContext _localctx = new SupertypeDeclContext(Context, State);
		EnterRule(_localctx, 296, RULE_supertypeDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				{
				State = 1277;
				Match(ABSTRACT);
				State = 1278;
				Match(SUPERTYPE);
				}
				break;
			case 2:
				{
				State = 1280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ABSTRACT) {
					{
					State = 1279;
					Match(ABSTRACT);
					}
				}

				State = 1282;
				Match(SUPERTYPE);
				State = 1283;
				Match(OF);
				State = 1284;
				Match(T__0);
				State = 1285;
				supertypeExpr();
				State = 1286;
				Match(T__3);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupertypeExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SupertypeFactorContext[] supertypeFactor() {
			return GetRuleContexts<SupertypeFactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SupertypeFactorContext supertypeFactor(int i) {
			return GetRuleContext<SupertypeFactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(ExpressParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(ExpressParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ANDOR() { return GetTokens(ExpressParser.ANDOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANDOR(int i) {
			return GetToken(ExpressParser.ANDOR, i);
		}
		public SupertypeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supertypeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSupertypeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSupertypeExpr(this);
		}
	}

	[RuleVersion(0)]
	public SupertypeExprContext supertypeExpr() {
		SupertypeExprContext _localctx = new SupertypeExprContext(Context, State);
		EnterRule(_localctx, 298, RULE_supertypeExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1290;
			supertypeFactor();
			State = 1295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND || _la==ANDOR) {
				{
				{
				State = 1291;
				_la = TokenStream.LA(1);
				if ( !(_la==AND || _la==ANDOR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1292;
				supertypeFactor();
				}
				}
				State = 1297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupertypeFactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityRefContext entityRef() {
			return GetRuleContext<EntityRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChoiceContext choice() {
			return GetRuleContext<ChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SupertypeExprContext supertypeExpr() {
			return GetRuleContext<SupertypeExprContext>(0);
		}
		public SupertypeFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supertypeFactor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterSupertypeFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitSupertypeFactor(this);
		}
	}

	[RuleVersion(0)]
	public SupertypeFactorContext supertypeFactor() {
		SupertypeFactorContext _localctx = new SupertypeFactorContext(Context, State);
		EnterRule(_localctx, 300, RULE_supertypeFactor);
		try {
			State = 1304;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SimpleId:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1298;
				entityRef();
				}
				break;
			case ONEOF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1299;
				choice();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1300;
				Match(T__0);
				State = 1301;
				supertypeExpr();
				State = 1302;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TailRemarkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RemarkStuffContext[] remarkStuff() {
			return GetRuleContexts<RemarkStuffContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemarkStuffContext remarkStuff(int i) {
			return GetRuleContext<RemarkStuffContext>(i);
		}
		public TailRemarkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tailRemark; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterTailRemark(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitTailRemark(this);
		}
	}

	[RuleVersion(0)]
	public TailRemarkContext tailRemark() {
		TailRemarkContext _localctx = new TailRemarkContext(Context, State);
		EnterRule(_localctx, 302, RULE_tailRemark);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1306;
			Match(T__1);
			State = 1310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 68719476735L) != 0)) {
				{
				{
				State = 1307;
				remarkStuff();
				}
				}
				State = 1312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(ExpressParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(ExpressParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(ExpressParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(ExpressParser.MOD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(ExpressParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(ExpressParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(ExpressParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(ExpressParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Path() { return GetToken(ExpressParser.Path, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 304, RULE_term);
		int _la;
		try {
			State = 1325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1313;
				factor();
				State = 1318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72058158826127360L) != 0) || _la==MOD) {
					{
					{
					State = 1314;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 72058158826127360L) != 0) || _la==MOD) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1315;
					factor();
					}
					}
					State = 1320;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1321;
				Match(TRUE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1322;
				Match(FALSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1323;
				Match(Path);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1324;
				arrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefContext typeDef() {
			return GetRuleContext<TypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSelContext typeSel() {
			return GetRuleContext<TypeSelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DomainRulesContext domainRules() {
			return GetRuleContext<DomainRulesContext>(0);
		}
		public TypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitTypeBody(this);
		}
	}

	[RuleVersion(0)]
	public TypeBodyContext typeBody() {
		TypeBodyContext _localctx = new TypeBodyContext(Context, State);
		EnterRule(_localctx, 306, RULE_typeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1327;
			typeDef();
			State = 1328;
			Match(T__19);
			State = 1329;
			typeSel();
			State = 1330;
			Match(T__7);
			State = 1332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 1331;
				domainRules();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(ExpressParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeBodyContext typeBody() {
			return GetRuleContext<TypeBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_TYPE() { return GetToken(ExpressParser.END_TYPE, 0); }
		public TypeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterTypeDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitTypeDecl(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclContext typeDecl() {
		TypeDeclContext _localctx = new TypeDeclContext(Context, State);
		EnterRule(_localctx, 308, RULE_typeDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1334;
			Match(TYPE);
			State = 1335;
			typeBody();
			State = 1336;
			Match(END_TYPE);
			State = 1337;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		public TypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterTypeDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitTypeDef(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefContext typeDef() {
		TypeDefContext _localctx = new TypeDefContext(Context, State);
		EnterRule(_localctx, 310, RULE_typeDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1339;
			Match(SimpleId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		public TypeLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterTypeLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitTypeLabel(this);
		}
	}

	[RuleVersion(0)]
	public TypeLabelContext typeLabel() {
		TypeLabelContext _localctx = new TypeLabelContext(Context, State);
		EnterRule(_localctx, 312, RULE_typeLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1341;
			Match(SimpleId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		public TypeRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterTypeRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitTypeRef(this);
		}
	}

	[RuleVersion(0)]
	public TypeRefContext typeRef() {
		TypeRefContext _localctx = new TypeRefContext(Context, State);
		EnterRule(_localctx, 314, RULE_typeRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1343;
			Match(SimpleId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedTypeContext namedType() {
			return GetRuleContext<NamedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTypeContext selectType() {
			return GetRuleContext<SelectTypeContext>(0);
		}
		public TypeSelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterTypeSel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitTypeSel(this);
		}
	}

	[RuleVersion(0)]
	public TypeSelContext typeSel() {
		TypeSelContext _localctx = new TypeSelContext(Context, State);
		EnterRule(_localctx, 316, RULE_typeSel);
		try {
			State = 1350;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ARRAY:
			case BAG:
			case LIST:
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1345;
				collectionType();
				}
				break;
			case SimpleId:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1346;
				namedType();
				}
				break;
			case BINARY:
			case BOOLEAN:
			case INTEGER:
			case LOGICAL:
			case NUMBER:
			case REAL:
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1347;
				simpleType();
				}
				break;
			case ENUMERATION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1348;
				enumType();
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1349;
				selectType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ExpressParser.NOT, 0); }
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterUnaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitUnaryOp(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 318, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1352;
			_la = TokenStream.LA(1);
			if ( !(_la==T__27 || _la==T__28 || _la==NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniqueRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelDefContext labelDef() {
			return GetRuleContext<LabelDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferencedAttrContext[] referencedAttr() {
			return GetRuleContexts<ReferencedAttrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferencedAttrContext referencedAttr(int i) {
			return GetRuleContext<ReferencedAttrContext>(i);
		}
		public UniqueRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uniqueRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterUniqueRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitUniqueRule(this);
		}
	}

	[RuleVersion(0)]
	public UniqueRuleContext uniqueRule() {
		UniqueRuleContext _localctx = new UniqueRuleContext(Context, State);
		EnterRule(_localctx, 320, RULE_uniqueRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1354;
			labelDef();
			State = 1355;
			Match(T__6);
			State = 1356;
			referencedAttr();
			State = 1361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 1357;
				Match(T__2);
				State = 1358;
				referencedAttr();
				}
				}
				State = 1363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniqueRulesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(ExpressParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UniqueRuleContext[] uniqueRule() {
			return GetRuleContexts<UniqueRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UniqueRuleContext uniqueRule(int i) {
			return GetRuleContext<UniqueRuleContext>(i);
		}
		public UniqueRulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uniqueRules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterUniqueRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitUniqueRules(this);
		}
	}

	[RuleVersion(0)]
	public UniqueRulesContext uniqueRules() {
		UniqueRulesContext _localctx = new UniqueRulesContext(Context, State);
		EnterRule(_localctx, 322, RULE_uniqueRules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1364;
			Match(UNIQUE);
			State = 1365;
			uniqueRule();
			State = 1366;
			Match(T__7);
			State = 1372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SimpleId) {
				{
				{
				State = 1367;
				uniqueRule();
				State = 1368;
				Match(T__7);
				}
				}
				State = 1374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(ExpressParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExprContext logicalExpr() {
			return GetRuleContext<LogicalExprContext>(0);
		}
		public UntilControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterUntilControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitUntilControl(this);
		}
	}

	[RuleVersion(0)]
	public UntilControlContext untilControl() {
		UntilControlContext _localctx = new UntilControlContext(Context, State);
		EnterRule(_localctx, 324, RULE_untilControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1375;
			Match(UNTIL);
			State = 1376;
			logicalExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(ExpressParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(ExpressParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseListContext useList() {
			return GetRuleContext<UseListContext>(0);
		}
		public UseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterUseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitUseClause(this);
		}
	}

	[RuleVersion(0)]
	public UseClauseContext useClause() {
		UseClauseContext _localctx = new UseClauseContext(Context, State);
		EnterRule(_localctx, 326, RULE_useClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1378;
			Match(USE);
			State = 1379;
			Match(FROM);
			State = 1380;
			schemaRef();
			State = 1382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 1381;
				useList();
				}
			}

			State = 1384;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportEntityContext[] importEntity() {
			return GetRuleContexts<ImportEntityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportEntityContext importEntity(int i) {
			return GetRuleContext<ImportEntityContext>(i);
		}
		public UseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterUseList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitUseList(this);
		}
	}

	[RuleVersion(0)]
	public UseListContext useList() {
		UseListContext _localctx = new UseListContext(Context, State);
		EnterRule(_localctx, 328, RULE_useList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1386;
			Match(T__0);
			State = 1387;
			importEntity();
			State = 1392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 1388;
				Match(T__2);
				State = 1389;
				importEntity();
				}
				}
				State = 1394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1395;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleId() { return GetToken(ExpressParser.SimpleId, 0); }
		public VarDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterVarDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitVarDef(this);
		}
	}

	[RuleVersion(0)]
	public VarDefContext varDef() {
		VarDefContext _localctx = new VarDefContext(Context, State);
		EnterRule(_localctx, 330, RULE_varDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1397;
			Match(SimpleId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(ExpressParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParamContext formalParam() {
			return GetRuleContext<FormalParamContext>(0);
		}
		public VarParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterVarParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitVarParam(this);
		}
	}

	[RuleVersion(0)]
	public VarParamContext varParam() {
		VarParamContext _localctx = new VarParamContext(Context, State);
		EnterRule(_localctx, 332, RULE_varParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1399;
			Match(VAR);
			State = 1400;
			formalParam();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarParamContext[] varParam() {
			return GetRuleContexts<VarParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarParamContext varParam(int i) {
			return GetRuleContext<VarParamContext>(i);
		}
		public VarParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterVarParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitVarParams(this);
		}
	}

	[RuleVersion(0)]
	public VarParamsContext varParams() {
		VarParamsContext _localctx = new VarParamsContext(Context, State);
		EnterRule(_localctx, 334, RULE_varParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1402;
			Match(T__0);
			State = 1403;
			varParam();
			State = 1408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 1404;
				Match(T__7);
				State = 1405;
				varParam();
				}
				}
				State = 1410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1411;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef() {
			return GetRuleContext<VarDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasRefContext aliasRef() {
			return GetRuleContext<AliasRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrRefContext attrRef() {
			return GetRuleContext<AttrRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstRefContext constRef() {
			return GetRuleContext<ConstRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityRefContext entityRef() {
			return GetRuleContext<EntityRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumRefContext enumRef() {
			return GetRuleContext<EnumRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncRefContext funcRef() {
			return GetRuleContext<FuncRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamRefContext paramRef() {
			return GetRuleContext<ParamRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcRefContext procRef() {
			return GetRuleContext<ProcRefContext>(0);
		}
		public VarRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterVarRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitVarRef(this);
		}
	}

	[RuleVersion(0)]
	public VarRefContext varRef() {
		VarRefContext _localctx = new VarRefContext(Context, State);
		EnterRule(_localctx, 336, RULE_varRef);
		try {
			State = 1434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1413;
				varDef();
				State = 1414;
				qualifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1416;
				aliasRef();
				State = 1417;
				qualifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1419;
				attrRef();
				State = 1420;
				qualifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1422;
				constRef();
				State = 1423;
				qualifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1425;
				entityRef();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1426;
				enumRef();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1427;
				funcRef();
				State = 1428;
				qualifier();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1430;
				paramRef();
				State = 1431;
				qualifier();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1433;
				procRef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ExpressParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExprContext logicalExpr() {
			return GetRuleContext<LogicalExprContext>(0);
		}
		public WhileControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterWhileControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitWhileControl(this);
		}
	}

	[RuleVersion(0)]
	public WhileControlContext whileControl() {
		WhileControlContext _localctx = new WhileControlContext(Context, State);
		EnterRule(_localctx, 338, RULE_whileControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1436;
			Match(WHILE);
			State = 1437;
			logicalExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberExprContext numberExpr() {
			return GetRuleContext<NumberExprContext>(0);
		}
		public WidthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_width; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.EnterWidth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressListener typedListener = listener as IExpressListener;
			if (typedListener != null) typedListener.ExitWidth(this);
		}
	}

	[RuleVersion(0)]
	public WidthContext width() {
		WidthContext _localctx = new WidthContext(Context, State);
		EnterRule(_localctx, 340, RULE_width);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1439;
			numberExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,163,1442,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		1,0,1,0,1,0,3,0,346,8,0,1,0,1,0,1,0,1,0,3,0,352,8,0,1,0,5,0,355,8,0,10,
		0,12,0,358,9,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,5,2,368,8,2,10,2,12,2,371,
		9,2,1,2,1,2,1,3,1,3,1,3,3,3,378,8,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,3,7,401,8,7,1,8,1,8,
		1,8,1,8,3,8,407,8,8,1,8,3,8,410,8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,419,
		8,9,1,9,1,9,1,10,1,10,1,11,5,11,426,8,11,10,11,12,11,429,9,11,1,11,5,11,
		432,8,11,10,11,12,11,435,9,11,1,11,5,11,438,8,11,10,11,12,11,441,9,11,
		1,12,1,12,1,13,1,13,3,13,447,8,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,
		14,3,14,457,8,14,3,14,459,8,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,
		1,18,1,18,1,18,1,18,1,19,1,19,1,19,5,19,476,8,19,10,19,12,19,479,9,19,
		1,19,1,19,1,19,1,20,5,20,485,8,20,10,20,12,20,488,9,20,1,20,3,20,491,8,
		20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,
		23,5,23,507,8,23,10,23,12,23,510,9,23,1,23,1,23,1,24,1,24,1,24,1,24,3,
		24,518,8,24,1,25,1,25,1,25,1,25,3,25,524,8,25,1,26,1,26,1,26,1,26,1,26,
		1,27,1,27,1,27,3,27,534,8,27,1,27,3,27,537,8,27,1,27,1,27,1,28,1,28,1,
		28,1,28,1,29,1,29,1,29,3,29,548,8,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,
		1,31,1,31,1,31,3,31,560,8,31,1,32,1,32,5,32,564,8,32,10,32,12,32,567,9,
		32,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,
		36,1,36,3,36,584,8,36,1,37,1,37,1,37,1,37,3,37,590,8,37,1,38,1,38,4,38,
		594,8,38,11,38,12,38,595,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,3,40,
		606,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,
		43,1,43,1,44,1,44,1,44,1,44,4,44,626,8,44,11,44,12,44,627,1,45,1,45,1,
		45,1,45,1,45,1,45,1,45,1,45,3,45,638,8,45,1,46,1,46,1,46,5,46,643,8,46,
		10,46,12,46,646,9,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,
		1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,5,51,670,8,
		51,10,51,12,51,673,9,51,3,51,675,8,51,1,51,1,51,1,52,1,52,1,53,1,53,1,
		54,1,54,1,54,3,54,686,8,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,56,
		1,56,1,56,5,56,699,8,56,10,56,12,56,702,9,56,1,57,1,57,1,57,1,58,1,58,
		1,58,5,58,710,8,58,10,58,12,58,713,9,58,1,58,1,58,3,58,717,8,58,1,58,1,
		58,1,58,1,59,1,59,3,59,724,8,59,1,60,1,60,1,60,3,60,729,8,60,1,60,1,60,
		1,60,1,61,1,61,1,61,3,61,737,8,61,1,62,1,62,1,62,3,62,742,8,62,1,63,1,
		63,1,63,5,63,747,8,63,10,63,12,63,750,9,63,1,63,1,63,1,63,1,64,1,64,1,
		64,1,64,5,64,759,8,64,10,64,12,64,762,9,64,1,64,1,64,1,65,1,65,1,66,1,
		66,1,66,5,66,771,8,66,10,66,12,66,774,9,66,1,66,1,66,1,66,1,66,1,67,1,
		67,3,67,782,8,67,1,68,1,68,3,68,786,8,68,1,68,1,68,1,69,1,69,1,69,1,69,
		1,69,1,69,1,70,1,70,1,70,3,70,799,8,70,1,71,1,71,1,71,1,71,1,71,1,71,3,
		71,807,8,71,1,71,1,71,1,71,1,72,1,72,1,72,3,72,815,8,72,1,73,1,73,1,73,
		3,73,820,8,73,1,74,1,74,1,74,1,74,5,74,826,8,74,10,74,12,74,829,9,74,1,
		74,1,74,1,75,1,75,1,75,1,75,1,75,3,75,838,8,75,1,76,1,76,1,77,1,77,1,77,
		1,77,1,77,1,77,1,77,3,77,849,8,77,1,78,1,78,1,78,1,78,3,78,855,8,78,1,
		79,1,79,1,80,1,80,3,80,861,8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,82,1,82,3,82,873,8,82,1,83,1,83,5,83,877,8,83,10,83,12,83,880,9,83,1,
		84,1,84,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,
		86,1,86,3,86,898,8,86,1,86,3,86,901,8,86,1,86,1,86,1,87,1,87,1,88,1,88,
		3,88,909,8,88,1,88,1,88,3,88,913,8,88,1,88,1,88,1,89,1,89,1,89,1,89,1,
		89,1,89,1,89,3,89,924,8,89,1,90,1,90,5,90,928,8,90,10,90,12,90,931,9,90,
		1,90,1,90,1,90,1,91,3,91,937,8,91,1,91,3,91,940,8,91,1,92,1,92,1,92,5,
		92,945,8,92,10,92,12,92,948,9,92,1,92,1,92,1,92,3,92,953,8,92,1,92,3,92,
		956,8,92,1,92,1,92,1,93,1,93,1,94,1,94,1,95,1,95,3,95,966,8,95,1,96,1,
		96,1,97,1,97,1,98,1,98,1,99,1,99,1,99,1,99,1,100,1,100,1,101,1,101,1,102,
		1,102,1,103,1,103,1,104,1,104,1,104,1,105,1,105,1,106,1,106,1,106,1,106,
		1,106,1,106,1,107,1,107,1,107,3,107,1000,8,107,1,107,1,107,1,108,1,108,
		3,108,1006,8,108,1,108,1,108,1,109,5,109,1011,8,109,10,109,12,109,1014,
		9,109,1,109,3,109,1017,8,109,1,109,3,109,1020,8,109,1,110,1,110,3,110,
		1024,8,110,1,111,1,111,1,111,5,111,1029,8,111,10,111,12,111,1032,9,111,
		1,112,1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,114,
		1,114,1,115,1,115,1,115,1,115,1,115,3,115,1052,8,115,1,116,1,116,1,116,
		1,116,3,116,1058,8,116,1,116,1,116,1,117,1,117,1,118,1,118,3,118,1066,
		8,118,1,119,1,119,1,120,3,120,1071,8,120,1,120,3,120,1074,8,120,1,120,
		3,120,1077,8,120,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,122,1,122,
		1,123,1,123,1,123,1,123,1,123,3,123,1093,8,123,1,123,1,123,1,123,1,123,
		1,123,3,123,1100,8,123,1,123,3,123,1103,8,123,1,124,1,124,1,124,3,124,
		1108,8,124,1,124,1,124,1,124,1,124,1,125,1,125,1,126,1,126,1,126,1,126,
		1,126,1,126,1,127,1,127,1,127,1,127,5,127,1126,8,127,10,127,12,127,1129,
		9,127,1,127,1,127,1,128,5,128,1134,8,128,10,128,12,128,1137,9,128,1,128,
		3,128,1140,8,128,1,128,1,128,5,128,1144,8,128,10,128,12,128,1147,9,128,
		1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,130,1,130,1,131,1,131,1,132,
		1,132,1,132,1,132,1,132,1,133,1,133,1,133,5,133,1168,8,133,10,133,12,133,
		1171,9,133,1,134,1,134,1,134,1,134,1,134,1,135,1,135,1,135,5,135,1181,
		8,135,10,135,12,135,1184,9,135,1,136,1,136,1,136,1,136,1,136,1,136,1,136,
		1,136,1,136,1,136,1,136,1,136,3,136,1198,8,136,1,137,1,137,1,137,1,137,
		1,137,1,137,1,137,3,137,1207,8,137,1,138,1,138,1,138,1,139,1,139,1,140,
		1,140,1,141,1,141,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,
		1,142,1,142,3,142,1229,8,142,1,143,1,143,5,143,1233,8,143,10,143,12,143,
		1236,9,143,1,144,1,144,1,144,1,144,1,144,3,144,1243,8,144,3,144,1245,8,
		144,1,145,3,145,1248,8,145,1,145,3,145,1251,8,145,1,146,1,146,1,146,1,
		146,1,146,1,146,1,146,1,146,1,146,1,146,3,146,1263,8,146,1,147,1,147,1,
		147,1,147,1,147,1,147,5,147,1271,8,147,10,147,12,147,1274,9,147,1,147,
		1,147,1,148,1,148,1,148,3,148,1281,8,148,1,148,1,148,1,148,1,148,1,148,
		1,148,3,148,1289,8,148,1,149,1,149,1,149,5,149,1294,8,149,10,149,12,149,
		1297,9,149,1,150,1,150,1,150,1,150,1,150,1,150,3,150,1305,8,150,1,151,
		1,151,5,151,1309,8,151,10,151,12,151,1312,9,151,1,152,1,152,1,152,5,152,
		1317,8,152,10,152,12,152,1320,9,152,1,152,1,152,1,152,1,152,3,152,1326,
		8,152,1,153,1,153,1,153,1,153,1,153,3,153,1333,8,153,1,154,1,154,1,154,
		1,154,1,154,1,155,1,155,1,156,1,156,1,157,1,157,1,158,1,158,1,158,1,158,
		1,158,3,158,1351,8,158,1,159,1,159,1,160,1,160,1,160,1,160,1,160,5,160,
		1360,8,160,10,160,12,160,1363,9,160,1,161,1,161,1,161,1,161,1,161,1,161,
		5,161,1371,8,161,10,161,12,161,1374,9,161,1,162,1,162,1,162,1,163,1,163,
		1,163,1,163,3,163,1383,8,163,1,163,1,163,1,164,1,164,1,164,1,164,5,164,
		1391,8,164,10,164,12,164,1394,9,164,1,164,1,164,1,165,1,165,1,166,1,166,
		1,166,1,167,1,167,1,167,1,167,5,167,1407,8,167,10,167,12,167,1410,9,167,
		1,167,1,167,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
		1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,3,168,
		1435,8,168,1,169,1,169,1,169,1,170,1,170,1,170,0,0,171,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
		62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
		108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
		144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
		180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
		216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,
		252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,
		288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,
		324,326,328,330,332,334,336,338,340,0,11,1,0,148,149,3,0,15,22,86,86,91,
		91,2,0,15,15,17,17,2,0,45,45,123,123,3,0,28,29,108,108,146,146,4,0,30,
		30,53,53,110,110,122,122,17,0,34,34,36,36,43,44,48,48,54,54,74,75,79,79,
		83,84,90,90,95,99,103,104,118,118,124,125,127,127,131,131,136,136,141,
		142,2,0,87,87,115,115,1,0,39,40,4,0,31,33,39,39,56,56,100,100,2,0,28,29,
		101,101,1449,0,342,1,0,0,0,2,361,1,0,0,0,4,363,1,0,0,0,6,374,1,0,0,0,8,
		382,1,0,0,0,10,384,1,0,0,0,12,386,1,0,0,0,14,400,1,0,0,0,16,402,1,0,0,
		0,18,413,1,0,0,0,20,422,1,0,0,0,22,427,1,0,0,0,24,442,1,0,0,0,26,444,1,
		0,0,0,28,451,1,0,0,0,30,460,1,0,0,0,32,462,1,0,0,0,34,464,1,0,0,0,36,466,
		1,0,0,0,38,472,1,0,0,0,40,486,1,0,0,0,42,492,1,0,0,0,44,494,1,0,0,0,46,
		501,1,0,0,0,48,517,1,0,0,0,50,523,1,0,0,0,52,525,1,0,0,0,54,530,1,0,0,
		0,56,540,1,0,0,0,58,544,1,0,0,0,60,551,1,0,0,0,62,559,1,0,0,0,64,561,1,
		0,0,0,66,571,1,0,0,0,68,573,1,0,0,0,70,579,1,0,0,0,72,583,1,0,0,0,74,589,
		1,0,0,0,76,591,1,0,0,0,78,597,1,0,0,0,80,605,1,0,0,0,82,607,1,0,0,0,84,
		613,1,0,0,0,86,617,1,0,0,0,88,621,1,0,0,0,90,637,1,0,0,0,92,639,1,0,0,
		0,94,649,1,0,0,0,96,652,1,0,0,0,98,657,1,0,0,0,100,659,1,0,0,0,102,664,
		1,0,0,0,104,678,1,0,0,0,106,680,1,0,0,0,108,685,1,0,0,0,110,689,1,0,0,
		0,112,695,1,0,0,0,114,703,1,0,0,0,116,706,1,0,0,0,118,723,1,0,0,0,120,
		725,1,0,0,0,122,733,1,0,0,0,124,738,1,0,0,0,126,743,1,0,0,0,128,754,1,
		0,0,0,130,765,1,0,0,0,132,767,1,0,0,0,134,781,1,0,0,0,136,785,1,0,0,0,
		138,789,1,0,0,0,140,795,1,0,0,0,142,800,1,0,0,0,144,811,1,0,0,0,146,816,
		1,0,0,0,148,821,1,0,0,0,150,837,1,0,0,0,152,839,1,0,0,0,154,841,1,0,0,
		0,156,850,1,0,0,0,158,856,1,0,0,0,160,860,1,0,0,0,162,862,1,0,0,0,164,
		872,1,0,0,0,166,874,1,0,0,0,168,881,1,0,0,0,170,888,1,0,0,0,172,900,1,
		0,0,0,174,904,1,0,0,0,176,906,1,0,0,0,178,923,1,0,0,0,180,925,1,0,0,0,
		182,936,1,0,0,0,184,941,1,0,0,0,186,959,1,0,0,0,188,961,1,0,0,0,190,965,
		1,0,0,0,192,967,1,0,0,0,194,969,1,0,0,0,196,971,1,0,0,0,198,973,1,0,0,
		0,200,977,1,0,0,0,202,979,1,0,0,0,204,981,1,0,0,0,206,983,1,0,0,0,208,
		985,1,0,0,0,210,988,1,0,0,0,212,990,1,0,0,0,214,996,1,0,0,0,216,1005,1,
		0,0,0,218,1012,1,0,0,0,220,1023,1,0,0,0,222,1030,1,0,0,0,224,1033,1,0,
		0,0,226,1037,1,0,0,0,228,1044,1,0,0,0,230,1046,1,0,0,0,232,1053,1,0,0,
		0,234,1061,1,0,0,0,236,1065,1,0,0,0,238,1067,1,0,0,0,240,1070,1,0,0,0,
		242,1078,1,0,0,0,244,1085,1,0,0,0,246,1102,1,0,0,0,248,1104,1,0,0,0,250,
		1113,1,0,0,0,252,1115,1,0,0,0,254,1121,1,0,0,0,256,1135,1,0,0,0,258,1148,
		1,0,0,0,260,1155,1,0,0,0,262,1157,1,0,0,0,264,1159,1,0,0,0,266,1164,1,
		0,0,0,268,1172,1,0,0,0,270,1177,1,0,0,0,272,1197,1,0,0,0,274,1206,1,0,
		0,0,276,1208,1,0,0,0,278,1211,1,0,0,0,280,1213,1,0,0,0,282,1215,1,0,0,
		0,284,1228,1,0,0,0,286,1230,1,0,0,0,288,1237,1,0,0,0,290,1247,1,0,0,0,
		292,1262,1,0,0,0,294,1264,1,0,0,0,296,1288,1,0,0,0,298,1290,1,0,0,0,300,
		1304,1,0,0,0,302,1306,1,0,0,0,304,1325,1,0,0,0,306,1327,1,0,0,0,308,1334,
		1,0,0,0,310,1339,1,0,0,0,312,1341,1,0,0,0,314,1343,1,0,0,0,316,1350,1,
		0,0,0,318,1352,1,0,0,0,320,1354,1,0,0,0,322,1364,1,0,0,0,324,1375,1,0,
		0,0,326,1378,1,0,0,0,328,1386,1,0,0,0,330,1397,1,0,0,0,332,1399,1,0,0,
		0,334,1402,1,0,0,0,336,1434,1,0,0,0,338,1436,1,0,0,0,340,1439,1,0,0,0,
		342,345,5,1,0,0,343,344,5,2,0,0,344,346,5,148,0,0,345,343,1,0,0,0,345,
		346,1,0,0,0,346,347,1,0,0,0,347,356,3,202,101,0,348,351,5,3,0,0,349,350,
		5,2,0,0,350,352,5,148,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,353,1,0,
		0,0,353,355,3,202,101,0,354,348,1,0,0,0,355,358,1,0,0,0,356,354,1,0,0,
		0,356,357,1,0,0,0,357,359,1,0,0,0,358,356,1,0,0,0,359,360,5,4,0,0,360,
		1,1,0,0,0,361,362,3,122,61,0,362,3,1,0,0,0,363,364,5,5,0,0,364,369,3,90,
		45,0,365,366,5,3,0,0,366,368,3,90,45,0,367,365,1,0,0,0,368,371,1,0,0,0,
		369,367,1,0,0,0,369,370,1,0,0,0,370,372,1,0,0,0,371,369,1,0,0,0,372,373,
		5,6,0,0,373,5,1,0,0,0,374,377,5,37,0,0,375,376,5,7,0,0,376,378,3,312,156,
		0,377,375,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,380,5,105,0,0,380,
		381,3,14,7,0,381,7,1,0,0,0,382,383,5,148,0,0,383,9,1,0,0,0,384,385,5,148,
		0,0,385,11,1,0,0,0,386,387,5,38,0,0,387,388,3,8,4,0,388,389,5,78,0,0,389,
		390,3,336,168,0,390,391,5,8,0,0,391,392,3,286,143,0,392,393,5,59,0,0,393,
		394,5,8,0,0,394,13,1,0,0,0,395,401,3,6,3,0,396,401,3,62,31,0,397,401,3,
		274,137,0,398,401,3,190,95,0,399,401,3,220,110,0,400,395,1,0,0,0,400,396,
		1,0,0,0,400,397,1,0,0,0,400,398,1,0,0,0,400,399,1,0,0,0,401,15,1,0,0,0,
		402,403,5,41,0,0,403,404,3,36,18,0,404,406,5,105,0,0,405,407,5,107,0,0,
		406,405,1,0,0,0,406,407,1,0,0,0,407,409,1,0,0,0,408,410,5,137,0,0,409,
		408,1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,412,3,50,25,0,412,17,1,
		0,0,0,413,414,3,336,168,0,414,418,5,9,0,0,415,419,3,122,61,0,416,419,3,
		84,42,0,417,419,5,10,0,0,418,415,1,0,0,0,418,416,1,0,0,0,418,417,1,0,0,
		0,419,420,1,0,0,0,420,421,5,8,0,0,421,19,1,0,0,0,422,423,7,0,0,0,423,21,
		1,0,0,0,424,426,3,118,59,0,425,424,1,0,0,0,426,429,1,0,0,0,427,425,1,0,
		0,0,427,428,1,0,0,0,428,433,1,0,0,0,429,427,1,0,0,0,430,432,3,76,38,0,
		431,430,1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,0,433,434,1,0,0,0,434,439,
		1,0,0,0,435,433,1,0,0,0,436,438,3,166,83,0,437,436,1,0,0,0,438,441,1,0,
		0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,23,1,0,0,0,441,439,1,0,0,0,442,
		443,7,0,0,0,443,25,1,0,0,0,444,446,5,45,0,0,445,447,3,36,18,0,446,445,
		1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,0,448,449,5,105,0,0,449,450,3,50,
		25,0,450,27,1,0,0,0,451,458,5,47,0,0,452,453,5,1,0,0,453,454,3,340,170,
		0,454,456,5,4,0,0,455,457,5,77,0,0,456,455,1,0,0,0,456,457,1,0,0,0,457,
		459,1,0,0,0,458,452,1,0,0,0,458,459,1,0,0,0,459,29,1,0,0,0,460,461,5,49,
		0,0,461,31,1,0,0,0,462,463,3,194,97,0,463,33,1,0,0,0,464,465,3,194,97,
		0,465,35,1,0,0,0,466,467,5,5,0,0,467,468,3,32,16,0,468,469,5,7,0,0,469,
		470,3,34,17,0,470,471,5,6,0,0,471,37,1,0,0,0,472,477,3,42,21,0,473,474,
		5,3,0,0,474,476,3,42,21,0,475,473,1,0,0,0,476,479,1,0,0,0,477,475,1,0,
		0,0,477,478,1,0,0,0,478,480,1,0,0,0,479,477,1,0,0,0,480,481,5,7,0,0,481,
		482,3,284,142,0,482,39,1,0,0,0,483,485,3,38,19,0,484,483,1,0,0,0,485,488,
		1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,490,1,0,0,0,488,486,1,0,0,
		0,489,491,3,198,99,0,490,489,1,0,0,0,490,491,1,0,0,0,491,41,1,0,0,0,492,
		493,3,122,61,0,493,43,1,0,0,0,494,495,5,51,0,0,495,496,3,262,131,0,496,
		497,5,105,0,0,497,498,3,40,20,0,498,499,5,60,0,0,499,500,5,8,0,0,500,45,
		1,0,0,0,501,502,5,106,0,0,502,503,5,1,0,0,503,508,3,298,149,0,504,505,
		5,3,0,0,505,507,3,298,149,0,506,504,1,0,0,0,507,510,1,0,0,0,508,506,1,
		0,0,0,508,509,1,0,0,0,509,511,1,0,0,0,510,508,1,0,0,0,511,512,5,4,0,0,
		512,47,1,0,0,0,513,518,3,16,8,0,514,518,3,26,13,0,515,518,3,176,88,0,516,
		518,3,268,134,0,517,513,1,0,0,0,517,514,1,0,0,0,517,515,1,0,0,0,517,516,
		1,0,0,0,518,49,1,0,0,0,519,524,3,48,24,0,520,524,3,190,95,0,521,524,3,
		274,137,0,522,524,3,140,70,0,523,519,1,0,0,0,523,520,1,0,0,0,523,521,1,
		0,0,0,523,522,1,0,0,0,524,51,1,0,0,0,525,526,5,46,0,0,526,527,3,286,143,
		0,527,528,5,58,0,0,528,529,5,8,0,0,529,53,1,0,0,0,530,531,5,41,0,0,531,
		533,5,105,0,0,532,534,5,107,0,0,533,532,1,0,0,0,533,534,1,0,0,0,534,536,
		1,0,0,0,535,537,5,137,0,0,536,535,1,0,0,0,536,537,1,0,0,0,537,538,1,0,
		0,0,538,539,3,14,7,0,539,55,1,0,0,0,540,541,5,45,0,0,541,542,5,105,0,0,
		542,543,3,14,7,0,543,57,1,0,0,0,544,545,5,92,0,0,545,547,5,105,0,0,546,
		548,5,137,0,0,547,546,1,0,0,0,547,548,1,0,0,0,548,549,1,0,0,0,549,550,
		3,14,7,0,550,59,1,0,0,0,551,552,5,123,0,0,552,553,5,105,0,0,553,554,3,
		14,7,0,554,61,1,0,0,0,555,560,3,54,27,0,556,560,3,56,28,0,557,560,3,58,
		29,0,558,560,3,60,30,0,559,555,1,0,0,0,559,556,1,0,0,0,559,557,1,0,0,0,
		559,558,1,0,0,0,560,63,1,0,0,0,561,565,5,52,0,0,562,564,3,68,34,0,563,
		562,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,568,1,
		0,0,0,567,565,1,0,0,0,568,569,5,61,0,0,569,570,5,8,0,0,570,65,1,0,0,0,
		571,572,5,148,0,0,572,67,1,0,0,0,573,574,3,70,35,0,574,575,5,7,0,0,575,
		576,3,50,25,0,576,577,3,156,78,0,577,578,5,8,0,0,578,69,1,0,0,0,579,580,
		5,148,0,0,580,71,1,0,0,0,581,584,3,70,35,0,582,584,3,278,139,0,583,581,
		1,0,0,0,583,582,1,0,0,0,584,73,1,0,0,0,585,590,3,96,48,0,586,590,3,138,
		69,0,587,590,3,212,106,0,588,590,3,308,154,0,589,585,1,0,0,0,589,586,1,
		0,0,0,589,587,1,0,0,0,589,588,1,0,0,0,590,75,1,0,0,0,591,593,5,55,0,0,
		592,594,3,80,40,0,593,592,1,0,0,0,594,595,1,0,0,0,595,593,1,0,0,0,595,
		596,1,0,0,0,596,77,1,0,0,0,597,598,3,20,10,0,598,599,5,7,0,0,599,600,3,
		50,25,0,600,601,3,156,78,0,601,602,5,8,0,0,602,79,1,0,0,0,603,606,3,78,
		39,0,604,606,3,82,41,0,605,603,1,0,0,0,605,604,1,0,0,0,606,81,1,0,0,0,
		607,608,3,24,12,0,608,609,5,7,0,0,609,610,3,50,25,0,610,611,3,156,78,0,
		611,612,5,8,0,0,612,83,1,0,0,0,613,614,3,122,61,0,614,615,5,11,0,0,615,
		616,5,149,0,0,616,85,1,0,0,0,617,618,3,174,87,0,618,619,5,7,0,0,619,620,
		3,186,93,0,620,87,1,0,0,0,621,625,5,144,0,0,622,623,3,86,43,0,623,624,
		5,8,0,0,624,626,1,0,0,0,625,622,1,0,0,0,626,627,1,0,0,0,627,625,1,0,0,
		0,627,628,1,0,0,0,628,89,1,0,0,0,629,630,3,122,61,0,630,631,5,7,0,0,631,
		632,3,244,122,0,632,638,1,0,0,0,633,638,5,158,0,0,634,638,5,153,0,0,635,
		638,3,122,61,0,636,638,3,84,42,0,637,629,1,0,0,0,637,633,1,0,0,0,637,634,
		1,0,0,0,637,635,1,0,0,0,637,636,1,0,0,0,638,91,1,0,0,0,639,644,5,12,0,
		0,640,643,3,92,46,0,641,643,3,238,119,0,642,640,1,0,0,0,642,641,1,0,0,
		0,643,646,1,0,0,0,644,642,1,0,0,0,644,645,1,0,0,0,645,647,1,0,0,0,646,
		644,1,0,0,0,647,648,5,13,0,0,648,93,1,0,0,0,649,650,3,22,11,0,650,651,
		3,182,91,0,651,95,1,0,0,0,652,653,3,100,50,0,653,654,3,94,47,0,654,655,
		5,62,0,0,655,656,5,8,0,0,656,97,1,0,0,0,657,658,5,148,0,0,658,99,1,0,0,
		0,659,660,5,71,0,0,660,661,3,98,49,0,661,662,3,290,145,0,662,663,5,8,0,
		0,663,101,1,0,0,0,664,665,3,104,52,0,665,674,5,1,0,0,666,671,3,122,61,
		0,667,668,5,3,0,0,668,670,3,122,61,0,669,667,1,0,0,0,670,673,1,0,0,0,671,
		669,1,0,0,0,671,672,1,0,0,0,672,675,1,0,0,0,673,671,1,0,0,0,674,666,1,
		0,0,0,674,675,1,0,0,0,675,676,1,0,0,0,676,677,5,4,0,0,677,103,1,0,0,0,
		678,679,5,148,0,0,679,105,1,0,0,0,680,681,5,148,0,0,681,107,1,0,0,0,682,
		683,3,314,157,0,683,684,5,14,0,0,684,686,1,0,0,0,685,682,1,0,0,0,685,686,
		1,0,0,0,686,687,1,0,0,0,687,688,3,106,53,0,688,109,1,0,0,0,689,690,5,72,
		0,0,690,691,5,105,0,0,691,692,5,1,0,0,692,693,3,112,56,0,693,694,5,4,0,
		0,694,111,1,0,0,0,695,700,3,106,53,0,696,697,5,3,0,0,697,699,3,106,53,
		0,698,696,1,0,0,0,699,702,1,0,0,0,700,698,1,0,0,0,700,701,1,0,0,0,701,
		113,1,0,0,0,702,700,1,0,0,0,703,704,5,73,0,0,704,705,5,8,0,0,705,115,1,
		0,0,0,706,711,3,20,10,0,707,708,5,3,0,0,708,710,3,20,10,0,709,707,1,0,
		0,0,710,713,1,0,0,0,711,709,1,0,0,0,711,712,1,0,0,0,712,714,1,0,0,0,713,
		711,1,0,0,0,714,716,5,7,0,0,715,717,5,107,0,0,716,715,1,0,0,0,716,717,
		1,0,0,0,717,718,1,0,0,0,718,719,3,50,25,0,719,720,5,8,0,0,720,117,1,0,
		0,0,721,724,3,116,58,0,722,724,3,120,60,0,723,721,1,0,0,0,723,722,1,0,
		0,0,724,119,1,0,0,0,725,726,3,24,12,0,726,728,5,7,0,0,727,729,5,107,0,
		0,728,727,1,0,0,0,728,729,1,0,0,0,729,730,1,0,0,0,730,731,3,50,25,0,731,
		732,5,8,0,0,732,121,1,0,0,0,733,736,3,270,135,0,734,735,7,1,0,0,735,737,
		3,270,135,0,736,734,1,0,0,0,736,737,1,0,0,0,737,123,1,0,0,0,738,741,3,
		272,136,0,739,740,5,23,0,0,740,742,3,272,136,0,741,739,1,0,0,0,741,742,
		1,0,0,0,742,125,1,0,0,0,743,748,3,200,100,0,744,745,5,3,0,0,745,747,3,
		200,100,0,746,744,1,0,0,0,747,750,1,0,0,0,748,746,1,0,0,0,748,749,1,0,
		0,0,749,751,1,0,0,0,750,748,1,0,0,0,751,752,5,7,0,0,752,753,3,134,67,0,
		753,127,1,0,0,0,754,755,5,1,0,0,755,760,3,126,63,0,756,757,5,8,0,0,757,
		759,3,126,63,0,758,756,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,760,761,
		1,0,0,0,761,763,1,0,0,0,762,760,1,0,0,0,763,764,5,4,0,0,764,129,1,0,0,
		0,765,766,5,148,0,0,766,131,1,0,0,0,767,768,5,81,0,0,768,772,3,130,65,
		0,769,771,3,128,64,0,770,769,1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,772,
		773,1,0,0,0,773,775,1,0,0,0,774,772,1,0,0,0,775,776,5,7,0,0,776,777,3,
		134,67,0,777,778,5,8,0,0,778,133,1,0,0,0,779,782,3,14,7,0,780,782,3,48,
		24,0,781,779,1,0,0,0,781,780,1,0,0,0,782,135,1,0,0,0,783,786,3,130,65,
		0,784,786,3,280,140,0,785,783,1,0,0,0,785,784,1,0,0,0,786,787,1,0,0,0,
		787,788,3,0,0,0,788,137,1,0,0,0,789,790,3,132,66,0,790,791,3,218,109,0,
		791,792,3,286,143,0,792,793,5,63,0,0,793,794,5,8,0,0,794,139,1,0,0,0,795,
		798,5,82,0,0,796,797,5,7,0,0,797,799,3,312,156,0,798,796,1,0,0,0,798,799,
		1,0,0,0,799,141,1,0,0,0,800,801,5,85,0,0,801,802,3,122,61,0,802,803,5,
		132,0,0,803,806,3,286,143,0,804,805,5,57,0,0,805,807,3,286,143,0,806,804,
		1,0,0,0,806,807,1,0,0,0,807,808,1,0,0,0,808,809,5,64,0,0,809,810,5,8,0,
		0,810,143,1,0,0,0,811,814,3,104,52,0,812,813,5,42,0,0,813,815,3,98,49,
		0,814,812,1,0,0,0,814,815,1,0,0,0,815,145,1,0,0,0,816,819,3,150,75,0,817,
		818,5,42,0,0,818,820,3,8,4,0,819,817,1,0,0,0,819,820,1,0,0,0,820,147,1,
		0,0,0,821,822,5,1,0,0,822,827,3,146,73,0,823,824,5,3,0,0,824,826,3,146,
		73,0,825,823,1,0,0,0,826,829,1,0,0,0,827,825,1,0,0,0,827,828,1,0,0,0,828,
		830,1,0,0,0,829,827,1,0,0,0,830,831,5,4,0,0,831,149,1,0,0,0,832,838,3,
		66,33,0,833,838,3,104,52,0,834,838,3,136,68,0,835,838,3,216,108,0,836,
		838,3,314,157,0,837,832,1,0,0,0,837,833,1,0,0,0,837,834,1,0,0,0,837,835,
		1,0,0,0,837,836,1,0,0,0,838,151,1,0,0,0,839,840,3,194,97,0,840,153,1,0,
		0,0,841,842,3,330,165,0,842,843,5,9,0,0,843,844,3,32,16,0,844,845,5,133,
		0,0,845,848,3,34,17,0,846,847,5,50,0,0,847,849,3,152,76,0,848,846,1,0,
		0,0,848,849,1,0,0,0,849,155,1,0,0,0,850,854,5,9,0,0,851,855,3,122,61,0,
		852,855,5,10,0,0,853,855,5,138,0,0,854,851,1,0,0,0,854,852,1,0,0,0,854,
		853,1,0,0,0,855,157,1,0,0,0,856,857,5,89,0,0,857,159,1,0,0,0,858,861,3,
		232,116,0,859,861,3,326,163,0,860,858,1,0,0,0,860,859,1,0,0,0,861,161,
		1,0,0,0,862,863,5,24,0,0,863,864,3,270,135,0,864,865,7,2,0,0,865,866,3,
		270,135,0,866,867,7,2,0,0,867,868,3,270,135,0,868,869,5,25,0,0,869,163,
		1,0,0,0,870,873,3,168,84,0,871,873,3,170,85,0,872,870,1,0,0,0,872,871,
		1,0,0,0,873,165,1,0,0,0,874,878,5,88,0,0,875,877,3,164,82,0,876,875,1,
		0,0,0,877,880,1,0,0,0,878,876,1,0,0,0,878,879,1,0,0,0,879,167,1,0,0,0,
		880,878,1,0,0,0,881,882,3,20,10,0,882,883,5,7,0,0,883,884,3,172,86,0,884,
		885,5,78,0,0,885,886,3,24,12,0,886,887,5,8,0,0,887,169,1,0,0,0,888,889,
		3,24,12,0,889,890,5,8,0,0,890,891,3,172,86,0,891,892,5,78,0,0,892,893,
		3,24,12,0,893,894,5,8,0,0,894,171,1,0,0,0,895,897,7,3,0,0,896,898,3,36,
		18,0,897,896,1,0,0,0,897,898,1,0,0,0,898,899,1,0,0,0,899,901,5,105,0,0,
		900,895,1,0,0,0,900,901,1,0,0,0,901,902,1,0,0,0,902,903,3,104,52,0,903,
		173,1,0,0,0,904,905,5,148,0,0,905,175,1,0,0,0,906,908,5,92,0,0,907,909,
		3,36,18,0,908,907,1,0,0,0,908,909,1,0,0,0,909,910,1,0,0,0,910,912,5,105,
		0,0,911,913,5,137,0,0,912,911,1,0,0,0,912,913,1,0,0,0,913,914,1,0,0,0,
		914,915,3,50,25,0,915,177,1,0,0,0,916,924,5,151,0,0,917,924,5,150,0,0,
		918,924,5,152,0,0,919,924,5,153,0,0,920,924,5,158,0,0,921,924,3,4,2,0,
		922,924,3,102,51,0,923,916,1,0,0,0,923,917,1,0,0,0,923,918,1,0,0,0,923,
		919,1,0,0,0,923,920,1,0,0,0,923,921,1,0,0,0,923,922,1,0,0,0,924,179,1,
		0,0,0,925,929,5,93,0,0,926,928,3,184,92,0,927,926,1,0,0,0,928,931,1,0,
		0,0,929,927,1,0,0,0,929,930,1,0,0,0,930,932,1,0,0,0,931,929,1,0,0,0,932,
		933,5,65,0,0,933,934,5,8,0,0,934,181,1,0,0,0,935,937,3,322,161,0,936,935,
		1,0,0,0,936,937,1,0,0,0,937,939,1,0,0,0,938,940,3,88,44,0,939,938,1,0,
		0,0,939,940,1,0,0,0,940,183,1,0,0,0,941,946,3,330,165,0,942,943,5,3,0,
		0,943,945,3,330,165,0,944,942,1,0,0,0,945,948,1,0,0,0,946,944,1,0,0,0,
		946,947,1,0,0,0,947,949,1,0,0,0,948,946,1,0,0,0,949,952,5,7,0,0,950,953,
		3,50,25,0,951,953,3,62,31,0,952,950,1,0,0,0,952,951,1,0,0,0,953,955,1,
		0,0,0,954,956,3,156,78,0,955,954,1,0,0,0,955,956,1,0,0,0,956,957,1,0,0,
		0,957,958,5,8,0,0,958,185,1,0,0,0,959,960,3,122,61,0,960,187,1,0,0,0,961,
		962,5,94,0,0,962,189,1,0,0,0,963,966,3,104,52,0,964,966,3,314,157,0,965,
		963,1,0,0,0,965,964,1,0,0,0,966,191,1,0,0,0,967,968,5,8,0,0,968,193,1,
		0,0,0,969,970,3,270,135,0,970,195,1,0,0,0,971,972,5,102,0,0,972,197,1,
		0,0,0,973,974,5,109,0,0,974,975,5,7,0,0,975,976,3,284,142,0,976,199,1,
		0,0,0,977,978,5,148,0,0,978,201,1,0,0,0,979,980,3,122,61,0,980,203,1,0,
		0,0,981,982,5,148,0,0,982,205,1,0,0,0,983,984,3,194,97,0,984,207,1,0,0,
		0,985,986,3,216,108,0,986,987,5,8,0,0,987,209,1,0,0,0,988,989,5,148,0,
		0,989,211,1,0,0,0,990,991,3,214,107,0,991,992,3,218,109,0,992,993,3,286,
		143,0,993,994,5,66,0,0,994,995,5,8,0,0,995,213,1,0,0,0,996,997,5,111,0,
		0,997,999,3,210,105,0,998,1000,3,334,167,0,999,998,1,0,0,0,999,1000,1,
		0,0,0,1000,1001,1,0,0,0,1001,1002,5,8,0,0,1002,215,1,0,0,0,1003,1006,3,
		210,105,0,1004,1006,3,282,141,0,1005,1003,1,0,0,0,1005,1004,1,0,0,0,1006,
		1007,1,0,0,0,1007,1008,3,0,0,0,1008,217,1,0,0,0,1009,1011,3,74,37,0,1010,
		1009,1,0,0,0,1011,1014,1,0,0,0,1012,1010,1,0,0,0,1012,1013,1,0,0,0,1013,
		1016,1,0,0,0,1014,1012,1,0,0,0,1015,1017,3,64,32,0,1016,1015,1,0,0,0,1016,
		1017,1,0,0,0,1017,1019,1,0,0,0,1018,1020,3,180,90,0,1019,1018,1,0,0,0,
		1019,1020,1,0,0,0,1020,219,1,0,0,0,1021,1024,3,6,3,0,1022,1024,3,140,70,
		0,1023,1021,1,0,0,0,1023,1022,1,0,0,0,1024,221,1,0,0,0,1025,1026,5,14,
		0,0,1026,1029,3,24,12,0,1027,1029,3,292,146,0,1028,1025,1,0,0,0,1028,1027,
		1,0,0,0,1029,1032,1,0,0,0,1030,1028,1,0,0,0,1030,1031,1,0,0,0,1031,223,
		1,0,0,0,1032,1030,1,0,0,0,1033,1034,3,330,165,0,1034,1035,5,26,0,0,1035,
		1036,3,2,1,0,1036,225,1,0,0,0,1037,1038,5,112,0,0,1038,1039,5,1,0,0,1039,
		1040,3,224,112,0,1040,1041,5,27,0,0,1041,1042,3,228,114,0,1042,1043,5,
		4,0,0,1043,227,1,0,0,0,1044,1045,3,186,93,0,1045,229,1,0,0,0,1046,1051,
		5,113,0,0,1047,1048,5,1,0,0,1048,1049,3,206,103,0,1049,1050,5,4,0,0,1050,
		1052,1,0,0,0,1051,1047,1,0,0,0,1051,1052,1,0,0,0,1052,231,1,0,0,0,1053,
		1054,5,114,0,0,1054,1055,5,80,0,0,1055,1057,3,260,130,0,1056,1058,3,148,
		74,0,1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,1059,1,0,0,0,1059,1060,5,
		8,0,0,1060,233,1,0,0,0,1061,1062,3,24,12,0,1062,235,1,0,0,0,1063,1066,
		3,92,46,0,1064,1066,3,302,151,0,1065,1063,1,0,0,0,1065,1064,1,0,0,0,1066,
		237,1,0,0,0,1067,1068,9,0,0,0,1068,239,1,0,0,0,1069,1071,3,154,77,0,1070,
		1069,1,0,0,0,1070,1071,1,0,0,0,1071,1073,1,0,0,0,1072,1074,3,338,169,0,
		1073,1072,1,0,0,0,1073,1074,1,0,0,0,1074,1076,1,0,0,0,1075,1077,3,324,
		162,0,1076,1075,1,0,0,0,1076,1077,1,0,0,0,1077,241,1,0,0,0,1078,1079,5,
		116,0,0,1079,1080,3,240,120,0,1080,1081,5,8,0,0,1081,1082,3,286,143,0,
		1082,1083,5,68,0,0,1083,1084,5,8,0,0,1084,243,1,0,0,0,1085,1086,3,194,
		97,0,1086,245,1,0,0,0,1087,1092,5,117,0,0,1088,1089,5,1,0,0,1089,1090,
		3,122,61,0,1090,1091,5,4,0,0,1091,1093,1,0,0,0,1092,1088,1,0,0,0,1092,
		1093,1,0,0,0,1093,1094,1,0,0,0,1094,1103,5,8,0,0,1095,1099,5,117,0,0,1096,
		1097,5,1,0,0,1097,1098,5,138,0,0,1098,1100,5,4,0,0,1099,1096,1,0,0,0,1099,
		1100,1,0,0,0,1100,1101,1,0,0,0,1101,1103,5,8,0,0,1102,1087,1,0,0,0,1102,
		1095,1,0,0,0,1103,247,1,0,0,0,1104,1105,3,252,126,0,1105,1107,3,218,109,
		0,1106,1108,3,286,143,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,1109,
		1,0,0,0,1109,1110,3,88,44,0,1110,1111,5,67,0,0,1111,1112,5,8,0,0,1112,
		249,1,0,0,0,1113,1114,5,148,0,0,1114,251,1,0,0,0,1115,1116,5,119,0,0,1116,
		1117,3,250,125,0,1117,1118,5,78,0,0,1118,1119,3,254,127,0,1119,1120,5,
		8,0,0,1120,253,1,0,0,0,1121,1122,5,1,0,0,1122,1127,3,104,52,0,1123,1124,
		5,3,0,0,1124,1126,3,104,52,0,1125,1123,1,0,0,0,1126,1129,1,0,0,0,1127,
		1125,1,0,0,0,1127,1128,1,0,0,0,1128,1130,1,0,0,0,1129,1127,1,0,0,0,1130,
		1131,5,4,0,0,1131,255,1,0,0,0,1132,1134,3,160,80,0,1133,1132,1,0,0,0,1134,
		1137,1,0,0,0,1135,1133,1,0,0,0,1135,1136,1,0,0,0,1136,1139,1,0,0,0,1137,
		1135,1,0,0,0,1138,1140,3,64,32,0,1139,1138,1,0,0,0,1139,1140,1,0,0,0,1140,
		1145,1,0,0,0,1141,1144,3,74,37,0,1142,1144,3,248,124,0,1143,1141,1,0,0,
		0,1143,1142,1,0,0,0,1144,1147,1,0,0,0,1145,1143,1,0,0,0,1145,1146,1,0,
		0,0,1146,257,1,0,0,0,1147,1145,1,0,0,0,1148,1149,5,120,0,0,1149,1150,5,
		147,0,0,1150,1151,5,8,0,0,1151,1152,3,256,128,0,1152,1153,5,69,0,0,1153,
		1154,5,8,0,0,1154,259,1,0,0,0,1155,1156,5,148,0,0,1156,261,1,0,0,0,1157,
		1158,3,122,61,0,1158,263,1,0,0,0,1159,1160,5,121,0,0,1160,1161,5,1,0,0,
		1161,1162,3,266,133,0,1162,1163,5,4,0,0,1163,265,1,0,0,0,1164,1169,3,190,
		95,0,1165,1166,5,3,0,0,1166,1168,3,190,95,0,1167,1165,1,0,0,0,1168,1171,
		1,0,0,0,1169,1167,1,0,0,0,1169,1170,1,0,0,0,1170,267,1,0,0,0,1171,1169,
		1,0,0,0,1172,1173,5,123,0,0,1173,1174,3,36,18,0,1174,1175,5,105,0,0,1175,
		1176,3,50,25,0,1176,269,1,0,0,0,1177,1182,3,304,152,0,1178,1179,7,4,0,
		0,1179,1181,3,304,152,0,1180,1178,1,0,0,0,1181,1184,1,0,0,0,1182,1180,
		1,0,0,0,1182,1183,1,0,0,0,1183,271,1,0,0,0,1184,1182,1,0,0,0,1185,1198,
		5,149,0,0,1186,1198,3,178,89,0,1187,1198,3,336,168,0,1188,1198,3,162,81,
		0,1189,1198,3,226,113,0,1190,1191,5,1,0,0,1191,1192,3,122,61,0,1192,1193,
		5,4,0,0,1193,1198,1,0,0,0,1194,1195,3,318,159,0,1195,1196,3,272,136,0,
		1196,1198,1,0,0,0,1197,1185,1,0,0,0,1197,1186,1,0,0,0,1197,1187,1,0,0,
		0,1197,1188,1,0,0,0,1197,1189,1,0,0,0,1197,1190,1,0,0,0,1197,1194,1,0,
		0,0,1198,273,1,0,0,0,1199,1207,3,28,14,0,1200,1207,3,30,15,0,1201,1207,
		3,158,79,0,1202,1207,3,188,94,0,1203,1207,3,196,98,0,1204,1207,3,230,115,
		0,1205,1207,3,288,144,0,1206,1199,1,0,0,0,1206,1200,1,0,0,0,1206,1201,
		1,0,0,0,1206,1202,1,0,0,0,1206,1203,1,0,0,0,1206,1204,1,0,0,0,1206,1205,
		1,0,0,0,1207,275,1,0,0,0,1208,1209,5,126,0,0,1209,1210,5,8,0,0,1210,277,
		1,0,0,0,1211,1212,7,5,0,0,1212,279,1,0,0,0,1213,1214,7,6,0,0,1214,281,
		1,0,0,0,1215,1216,7,7,0,0,1216,283,1,0,0,0,1217,1229,3,12,6,0,1218,1229,
		3,18,9,0,1219,1229,3,44,22,0,1220,1229,3,52,26,0,1221,1229,3,114,57,0,
		1222,1229,3,142,71,0,1223,1229,3,192,96,0,1224,1229,3,208,104,0,1225,1229,
		3,242,121,0,1226,1229,3,246,123,0,1227,1229,3,276,138,0,1228,1217,1,0,
		0,0,1228,1218,1,0,0,0,1228,1219,1,0,0,0,1228,1220,1,0,0,0,1228,1221,1,
		0,0,0,1228,1222,1,0,0,0,1228,1223,1,0,0,0,1228,1224,1,0,0,0,1228,1225,
		1,0,0,0,1228,1226,1,0,0,0,1228,1227,1,0,0,0,1229,285,1,0,0,0,1230,1234,
		3,284,142,0,1231,1233,3,284,142,0,1232,1231,1,0,0,0,1233,1236,1,0,0,0,
		1234,1232,1,0,0,0,1234,1235,1,0,0,0,1235,287,1,0,0,0,1236,1234,1,0,0,0,
		1237,1244,5,128,0,0,1238,1239,5,1,0,0,1239,1240,3,340,170,0,1240,1242,
		5,4,0,0,1241,1243,5,77,0,0,1242,1241,1,0,0,0,1242,1243,1,0,0,0,1243,1245,
		1,0,0,0,1244,1238,1,0,0,0,1244,1245,1,0,0,0,1245,289,1,0,0,0,1246,1248,
		3,296,148,0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,1248,1250,1,0,0,0,1249,
		1251,3,294,147,0,1250,1249,1,0,0,0,1250,1251,1,0,0,0,1251,291,1,0,0,0,
		1252,1253,5,5,0,0,1253,1254,3,194,97,0,1254,1255,5,6,0,0,1255,1263,1,0,
		0,0,1256,1257,5,5,0,0,1257,1258,3,194,97,0,1258,1259,5,7,0,0,1259,1260,
		3,194,97,0,1260,1261,5,6,0,0,1261,1263,1,0,0,0,1262,1252,1,0,0,0,1262,
		1256,1,0,0,0,1263,293,1,0,0,0,1264,1265,5,129,0,0,1265,1266,5,105,0,0,
		1266,1267,5,1,0,0,1267,1272,3,104,52,0,1268,1269,5,3,0,0,1269,1271,3,104,
		52,0,1270,1268,1,0,0,0,1271,1274,1,0,0,0,1272,1270,1,0,0,0,1272,1273,1,
		0,0,0,1273,1275,1,0,0,0,1274,1272,1,0,0,0,1275,1276,5,4,0,0,1276,295,1,
		0,0,0,1277,1278,5,35,0,0,1278,1289,5,130,0,0,1279,1281,5,35,0,0,1280,1279,
		1,0,0,0,1280,1281,1,0,0,0,1281,1282,1,0,0,0,1282,1283,5,130,0,0,1283,1284,
		5,105,0,0,1284,1285,5,1,0,0,1285,1286,3,298,149,0,1286,1287,5,4,0,0,1287,
		1289,1,0,0,0,1288,1277,1,0,0,0,1288,1280,1,0,0,0,1289,297,1,0,0,0,1290,
		1295,3,300,150,0,1291,1292,7,8,0,0,1292,1294,3,300,150,0,1293,1291,1,0,
		0,0,1294,1297,1,0,0,0,1295,1293,1,0,0,0,1295,1296,1,0,0,0,1296,299,1,0,
		0,0,1297,1295,1,0,0,0,1298,1305,3,104,52,0,1299,1305,3,46,23,0,1300,1301,
		5,1,0,0,1301,1302,3,298,149,0,1302,1303,5,4,0,0,1303,1305,1,0,0,0,1304,
		1298,1,0,0,0,1304,1299,1,0,0,0,1304,1300,1,0,0,0,1305,301,1,0,0,0,1306,
		1310,5,2,0,0,1307,1309,3,238,119,0,1308,1307,1,0,0,0,1309,1312,1,0,0,0,
		1310,1308,1,0,0,0,1310,1311,1,0,0,0,1311,303,1,0,0,0,1312,1310,1,0,0,0,
		1313,1318,3,124,62,0,1314,1315,7,9,0,0,1315,1317,3,124,62,0,1316,1314,
		1,0,0,0,1317,1320,1,0,0,0,1318,1316,1,0,0,0,1318,1319,1,0,0,0,1319,1326,
		1,0,0,0,1320,1318,1,0,0,0,1321,1326,5,134,0,0,1322,1326,5,76,0,0,1323,
		1326,5,149,0,0,1324,1326,3,16,8,0,1325,1313,1,0,0,0,1325,1321,1,0,0,0,
		1325,1322,1,0,0,0,1325,1323,1,0,0,0,1325,1324,1,0,0,0,1326,305,1,0,0,0,
		1327,1328,3,310,155,0,1328,1329,5,20,0,0,1329,1330,3,316,158,0,1330,1332,
		5,8,0,0,1331,1333,3,88,44,0,1332,1331,1,0,0,0,1332,1333,1,0,0,0,1333,307,
		1,0,0,0,1334,1335,5,135,0,0,1335,1336,3,306,153,0,1336,1337,5,70,0,0,1337,
		1338,5,8,0,0,1338,309,1,0,0,0,1339,1340,5,148,0,0,1340,311,1,0,0,0,1341,
		1342,5,148,0,0,1342,313,1,0,0,0,1343,1344,5,148,0,0,1344,315,1,0,0,0,1345,
		1351,3,48,24,0,1346,1351,3,190,95,0,1347,1351,3,274,137,0,1348,1351,3,
		110,55,0,1349,1351,3,264,132,0,1350,1345,1,0,0,0,1350,1346,1,0,0,0,1350,
		1347,1,0,0,0,1350,1348,1,0,0,0,1350,1349,1,0,0,0,1351,317,1,0,0,0,1352,
		1353,7,10,0,0,1353,319,1,0,0,0,1354,1355,3,174,87,0,1355,1356,5,7,0,0,
		1356,1361,3,234,117,0,1357,1358,5,3,0,0,1358,1360,3,234,117,0,1359,1357,
		1,0,0,0,1360,1363,1,0,0,0,1361,1359,1,0,0,0,1361,1362,1,0,0,0,1362,321,
		1,0,0,0,1363,1361,1,0,0,0,1364,1365,5,137,0,0,1365,1366,3,320,160,0,1366,
		1372,5,8,0,0,1367,1368,3,320,160,0,1368,1369,5,8,0,0,1369,1371,1,0,0,0,
		1370,1367,1,0,0,0,1371,1374,1,0,0,0,1372,1370,1,0,0,0,1372,1373,1,0,0,
		0,1373,323,1,0,0,0,1374,1372,1,0,0,0,1375,1376,5,139,0,0,1376,1377,3,186,
		93,0,1377,325,1,0,0,0,1378,1379,5,140,0,0,1379,1380,5,80,0,0,1380,1382,
		3,260,130,0,1381,1383,3,328,164,0,1382,1381,1,0,0,0,1382,1383,1,0,0,0,
		1383,1384,1,0,0,0,1384,1385,5,8,0,0,1385,327,1,0,0,0,1386,1387,5,1,0,0,
		1387,1392,3,144,72,0,1388,1389,5,3,0,0,1389,1391,3,144,72,0,1390,1388,
		1,0,0,0,1391,1394,1,0,0,0,1392,1390,1,0,0,0,1392,1393,1,0,0,0,1393,1395,
		1,0,0,0,1394,1392,1,0,0,0,1395,1396,5,4,0,0,1396,329,1,0,0,0,1397,1398,
		5,148,0,0,1398,331,1,0,0,0,1399,1400,5,143,0,0,1400,1401,3,126,63,0,1401,
		333,1,0,0,0,1402,1403,5,1,0,0,1403,1408,3,332,166,0,1404,1405,5,8,0,0,
		1405,1407,3,332,166,0,1406,1404,1,0,0,0,1407,1410,1,0,0,0,1408,1406,1,
		0,0,0,1408,1409,1,0,0,0,1409,1411,1,0,0,0,1410,1408,1,0,0,0,1411,1412,
		5,4,0,0,1412,335,1,0,0,0,1413,1414,3,330,165,0,1414,1415,3,222,111,0,1415,
		1435,1,0,0,0,1416,1417,3,10,5,0,1417,1418,3,222,111,0,1418,1435,1,0,0,
		0,1419,1420,3,24,12,0,1420,1421,3,222,111,0,1421,1435,1,0,0,0,1422,1423,
		3,72,36,0,1423,1424,3,222,111,0,1424,1435,1,0,0,0,1425,1435,3,104,52,0,
		1426,1435,3,108,54,0,1427,1428,3,136,68,0,1428,1429,3,222,111,0,1429,1435,
		1,0,0,0,1430,1431,3,204,102,0,1431,1432,3,222,111,0,1432,1435,1,0,0,0,
		1433,1435,3,216,108,0,1434,1413,1,0,0,0,1434,1416,1,0,0,0,1434,1419,1,
		0,0,0,1434,1422,1,0,0,0,1434,1425,1,0,0,0,1434,1426,1,0,0,0,1434,1427,
		1,0,0,0,1434,1430,1,0,0,0,1434,1433,1,0,0,0,1435,337,1,0,0,0,1436,1437,
		5,145,0,0,1437,1438,3,186,93,0,1438,339,1,0,0,0,1439,1440,3,194,97,0,1440,
		341,1,0,0,0,122,345,351,356,369,377,400,406,409,418,427,433,439,446,456,
		458,477,486,490,508,517,523,533,536,547,559,565,583,589,595,605,627,637,
		642,644,671,674,685,700,711,716,723,728,736,741,748,760,772,781,785,798,
		806,814,819,827,837,848,854,860,872,878,897,900,908,912,923,929,936,939,
		946,952,955,965,999,1005,1012,1016,1019,1023,1028,1030,1051,1057,1065,
		1070,1073,1076,1092,1099,1102,1107,1127,1135,1139,1143,1145,1169,1182,
		1197,1206,1228,1234,1242,1244,1247,1250,1262,1272,1280,1288,1295,1304,
		1310,1318,1325,1332,1350,1361,1372,1382,1392,1408,1434
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Express
