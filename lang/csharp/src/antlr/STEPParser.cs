//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/dev/Hypar/IFC-gen/grammar/STEP.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace STEP {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class STEPParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, IntegerLiteral=9, 
		Letter=10, CapitalLetter=11, DateTime=12, PlusMinus=13, Derived=14, BoolLogical=15, 
		Enum=16, RealLiteral=17, DATA=18, ENDSEC=19, FILE_DESCRIPTION=20, FILE_NAME=21, 
		FILE_SCHEMA=22, HEADER=23, Id=24, ISO=25, ISO_END=26, StringLiteral=27, 
		TypeRef=28, Undefined=29, AnyString=30, NewlineChar=31, WS=32, Comments=33;
	public const int
		RULE_author = 0, RULE_authorisation = 1, RULE_collection = 2, RULE_collectionValue = 3, 
		RULE_constructor = 4, RULE_data = 5, RULE_description = 6, RULE_file = 7, 
		RULE_fileDescription = 8, RULE_fileName = 9, RULE_filePath = 10, RULE_fileSchema = 11, 
		RULE_header = 12, RULE_implementation = 13, RULE_instance = 14, RULE_name = 15, 
		RULE_originating_system = 16, RULE_organization = 17, RULE_parameter = 18, 
		RULE_preprocessor_version = 19, RULE_timeStamp = 20;
	public static readonly string[] ruleNames = {
		"author", "authorisation", "collection", "collectionValue", "constructor", 
		"data", "description", "file", "fileDescription", "fileName", "filePath", 
		"fileSchema", "header", "implementation", "instance", "name", "originating_system", 
		"organization", "parameter", "preprocessor_version", "timeStamp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "','", "')'", "'()'", "';'", "'''", "'.'", "'='", null, null, 
		null, null, null, "'*'", null, null, null, "'DATA'", "'ENDSEC'", "'FILE_DESCRIPTION'", 
		"'FILE_NAME'", "'FILE_SCHEMA'", "'HEADER'", null, null, null, null, null, 
		"'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "IntegerLiteral", 
		"Letter", "CapitalLetter", "DateTime", "PlusMinus", "Derived", "BoolLogical", 
		"Enum", "RealLiteral", "DATA", "ENDSEC", "FILE_DESCRIPTION", "FILE_NAME", 
		"FILE_SCHEMA", "HEADER", "Id", "ISO", "ISO_END", "StringLiteral", "TypeRef", 
		"Undefined", "AnyString", "NewlineChar", "WS", "Comments"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "STEP.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static STEPParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public STEPParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public STEPParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class AuthorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		public AuthorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_author; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterAuthor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitAuthor(this);
		}
	}

	[RuleVersion(0)]
	public AuthorContext author() {
		AuthorContext _localctx = new AuthorContext(Context, State);
		EnterRule(_localctx, 0, RULE_author);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(AnyString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuthorisationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		public AuthorisationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authorisation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterAuthorisation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitAuthorisation(this);
		}
	}

	[RuleVersion(0)]
	public AuthorisationContext authorisation() {
		AuthorisationContext _localctx = new AuthorisationContext(Context, State);
		EnterRule(_localctx, 2, RULE_authorisation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(AnyString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollectionValueContext[] collectionValue() {
			return GetRuleContexts<CollectionValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionValueContext collectionValue(int i) {
			return GetRuleContext<CollectionValueContext>(i);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 4, RULE_collection);
		int _la;
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46;
				Match(T__0);
				State = 47;
				collectionValue();
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 48;
					Match(T__1);
					State = 49;
					collectionValue();
					}
					}
					State = 54;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 55;
				Match(T__2);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RealLiteral() { return GetToken(STEPParser.RealLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(STEPParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(STEPParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(STEPParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Undefined() { return GetToken(STEPParser.Undefined, 0); }
		public CollectionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterCollectionValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitCollectionValue(this);
		}
	}

	[RuleVersion(0)]
	public CollectionValueContext collectionValue() {
		CollectionValueContext _localctx = new CollectionValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_collectionValue);
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60;
				collection();
				}
				break;
			case RealLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 61;
				Match(RealLiteral);
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 62;
				Match(IntegerLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 63;
				Match(StringLiteral);
				}
				break;
			case AnyString:
				EnterOuterAlt(_localctx, 5);
				{
				State = 64;
				Match(AnyString);
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 6);
				{
				State = 65;
				Match(Id);
				}
				break;
			case TypeRef:
				EnterOuterAlt(_localctx, 7);
				{
				State = 66;
				constructor();
				}
				break;
			case Undefined:
				EnterOuterAlt(_localctx, 8);
				{
				State = 67;
				Match(Undefined);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeRef() { return GetToken(STEPParser.TypeRef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 8, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(TypeRef);
			State = 71;
			Match(T__0);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2030289426L) != 0)) {
				{
				State = 72;
				parameter();
				}
			}

			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 75;
				Match(T__1);
				State = 76;
				parameter();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(STEPParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDSEC() { return GetToken(STEPParser.ENDSEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstanceContext[] instance() {
			return GetRuleContexts<InstanceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstanceContext instance(int i) {
			return GetRuleContext<InstanceContext>(i);
		}
		public DataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitData(this);
		}
	}

	[RuleVersion(0)]
	public DataContext data() {
		DataContext _localctx = new DataContext(Context, State);
		EnterRule(_localctx, 10, RULE_data);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(DATA);
			State = 85;
			Match(T__4);
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Id) {
				{
				{
				State = 86;
				instance();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 92;
			Match(ENDSEC);
			State = 93;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitDescription(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(Context, State);
		EnterRule(_localctx, 12, RULE_description);
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AnyString:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				Match(AnyString);
				}
				break;
			case T__0:
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				collection();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISO() { return GetToken(STEPParser.ISO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HeaderContext header() {
			return GetRuleContext<HeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataContext data() {
			return GetRuleContext<DataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISO_END() { return GetToken(STEPParser.ISO_END, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 14, RULE_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(ISO);
			State = 100;
			header();
			State = 101;
			data();
			State = 102;
			Match(ISO_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileDescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_DESCRIPTION() { return GetToken(STEPParser.FILE_DESCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplementationContext implementation() {
			return GetRuleContext<ImplementationContext>(0);
		}
		public FileDescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileDescription; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterFileDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitFileDescription(this);
		}
	}

	[RuleVersion(0)]
	public FileDescriptionContext fileDescription() {
		FileDescriptionContext _localctx = new FileDescriptionContext(Context, State);
		EnterRule(_localctx, 16, RULE_fileDescription);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(FILE_DESCRIPTION);
			State = 105;
			Match(T__0);
			State = 106;
			description();
			State = 107;
			Match(T__1);
			State = 108;
			implementation();
			State = 109;
			Match(T__2);
			State = 110;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_NAME() { return GetToken(STEPParser.FILE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeStampContext timeStamp() {
			return GetRuleContext<TimeStampContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_versionContext preprocessor_version() {
			return GetRuleContext<Preprocessor_versionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Originating_systemContext originating_system() {
			return GetRuleContext<Originating_systemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AuthorisationContext authorisation() {
			return GetRuleContext<AuthorisationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AuthorContext author() {
			return GetRuleContext<AuthorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext[] collection() {
			return GetRuleContexts<CollectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection(int i) {
			return GetRuleContext<CollectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrganizationContext organization() {
			return GetRuleContext<OrganizationContext>(0);
		}
		public FileNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterFileName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitFileName(this);
		}
	}

	[RuleVersion(0)]
	public FileNameContext fileName() {
		FileNameContext _localctx = new FileNameContext(Context, State);
		EnterRule(_localctx, 18, RULE_fileName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(FILE_NAME);
			State = 113;
			Match(T__0);
			State = 114;
			name();
			State = 115;
			Match(T__1);
			State = 116;
			timeStamp();
			State = 117;
			Match(T__1);
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AnyString:
				{
				State = 118;
				author();
				}
				break;
			case T__0:
			case T__3:
				{
				State = 119;
				collection();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 122;
			Match(T__1);
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AnyString:
				{
				State = 123;
				organization();
				}
				break;
			case T__0:
			case T__3:
				{
				State = 124;
				collection();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 127;
			Match(T__1);
			State = 128;
			preprocessor_version();
			State = 129;
			Match(T__1);
			State = 130;
			originating_system();
			State = 131;
			Match(T__1);
			State = 132;
			authorisation();
			State = 133;
			Match(T__2);
			State = 134;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilePathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Letter() { return GetTokens(STEPParser.Letter); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Letter(int i) {
			return GetToken(STEPParser.Letter, i);
		}
		public FilePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filePath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterFilePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitFilePath(this);
		}
	}

	[RuleVersion(0)]
	public FilePathContext filePath() {
		FilePathContext _localctx = new FilePathContext(Context, State);
		EnterRule(_localctx, 20, RULE_filePath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(T__5);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Letter) {
				{
				{
				State = 137;
				Match(Letter);
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 143;
			Match(T__6);
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Letter) {
				{
				{
				State = 144;
				Match(Letter);
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 150;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSchemaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_SCHEMA() { return GetToken(STEPParser.FILE_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		public FileSchemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSchema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterFileSchema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitFileSchema(this);
		}
	}

	[RuleVersion(0)]
	public FileSchemaContext fileSchema() {
		FileSchemaContext _localctx = new FileSchemaContext(Context, State);
		EnterRule(_localctx, 22, RULE_fileSchema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(FILE_SCHEMA);
			State = 153;
			Match(T__0);
			State = 154;
			Match(T__0);
			State = 155;
			Match(AnyString);
			State = 156;
			Match(T__2);
			State = 157;
			Match(T__2);
			State = 158;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER() { return GetToken(STEPParser.HEADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileDescriptionContext fileDescription() {
			return GetRuleContext<FileDescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileNameContext fileName() {
			return GetRuleContext<FileNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSchemaContext fileSchema() {
			return GetRuleContext<FileSchemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDSEC() { return GetToken(STEPParser.ENDSEC, 0); }
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitHeader(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(Context, State);
		EnterRule(_localctx, 24, RULE_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(HEADER);
			State = 161;
			Match(T__4);
			State = 162;
			fileDescription();
			State = 163;
			fileName();
			State = 164;
			fileSchema();
			State = 165;
			Match(ENDSEC);
			State = 166;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		public ImplementationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterImplementation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitImplementation(this);
		}
	}

	[RuleVersion(0)]
	public ImplementationContext implementation() {
		ImplementationContext _localctx = new ImplementationContext(Context, State);
		EnterRule(_localctx, 26, RULE_implementation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(AnyString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(STEPParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public InstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitInstance(this);
		}
	}

	[RuleVersion(0)]
	public InstanceContext instance() {
		InstanceContext _localctx = new InstanceContext(Context, State);
		EnterRule(_localctx, 28, RULE_instance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(Id);
			State = 171;
			Match(T__7);
			State = 172;
			constructor();
			State = 173;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilePathContext filePath() {
			return GetRuleContext<FilePathContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 30, RULE_name);
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AnyString:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175;
				Match(AnyString);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176;
				filePath();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Originating_systemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		public Originating_systemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_originating_system; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterOriginating_system(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitOriginating_system(this);
		}
	}

	[RuleVersion(0)]
	public Originating_systemContext originating_system() {
		Originating_systemContext _localctx = new Originating_systemContext(Context, State);
		EnterRule(_localctx, 32, RULE_originating_system);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(AnyString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrganizationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		public OrganizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_organization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterOrganization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitOrganization(this);
		}
	}

	[RuleVersion(0)]
	public OrganizationContext organization() {
		OrganizationContext _localctx = new OrganizationContext(Context, State);
		EnterRule(_localctx, 34, RULE_organization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(AnyString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Undefined() { return GetToken(STEPParser.Undefined, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(STEPParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Derived() { return GetToken(STEPParser.Derived, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(STEPParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolLogical() { return GetToken(STEPParser.BoolLogical, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RealLiteral() { return GetToken(STEPParser.RealLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(STEPParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(STEPParser.IntegerLiteral, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameter);
		try {
			State = 194;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TypeRef:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183;
				constructor();
				}
				break;
			case T__0:
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				collection();
				}
				break;
			case Undefined:
				EnterOuterAlt(_localctx, 3);
				{
				State = 185;
				Match(Undefined);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 186;
				Match(StringLiteral);
				}
				break;
			case Derived:
				EnterOuterAlt(_localctx, 5);
				{
				State = 187;
				Match(Derived);
				}
				break;
			case Enum:
				EnterOuterAlt(_localctx, 6);
				{
				State = 188;
				Match(Enum);
				}
				break;
			case BoolLogical:
				EnterOuterAlt(_localctx, 7);
				{
				State = 189;
				Match(BoolLogical);
				}
				break;
			case RealLiteral:
				EnterOuterAlt(_localctx, 8);
				{
				State = 190;
				Match(RealLiteral);
				}
				break;
			case AnyString:
				EnterOuterAlt(_localctx, 9);
				{
				State = 191;
				Match(AnyString);
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 10);
				{
				State = 192;
				Match(Id);
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 11);
				{
				State = 193;
				Match(IntegerLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Preprocessor_versionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		public Preprocessor_versionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterPreprocessor_version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitPreprocessor_version(this);
		}
	}

	[RuleVersion(0)]
	public Preprocessor_versionContext preprocessor_version() {
		Preprocessor_versionContext _localctx = new Preprocessor_versionContext(Context, State);
		EnterRule(_localctx, 38, RULE_preprocessor_version);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(AnyString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStampContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DateTime() { return GetToken(STEPParser.DateTime, 0); }
		public TimeStampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStamp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterTimeStamp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitTimeStamp(this);
		}
	}

	[RuleVersion(0)]
	public TimeStampContext timeStamp() {
		TimeStampContext _localctx = new TimeStampContext(Context, State);
		EnterRule(_localctx, 40, RULE_timeStamp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(DateTime);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,33,201,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,1,0,1,
		1,1,1,1,2,1,2,1,2,1,2,5,2,51,8,2,10,2,12,2,54,9,2,1,2,1,2,1,2,3,2,59,8,
		2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,69,8,3,1,4,1,4,1,4,3,4,74,8,4,1,
		4,1,4,5,4,78,8,4,10,4,12,4,81,9,4,1,4,1,4,1,5,1,5,1,5,5,5,88,8,5,10,5,
		12,5,91,9,5,1,5,1,5,1,5,1,6,1,6,3,6,98,8,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,121,8,9,1,
		9,1,9,1,9,3,9,126,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,5,
		10,139,8,10,10,10,12,10,142,9,10,1,10,1,10,5,10,146,8,10,10,10,12,10,149,
		9,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
		3,15,178,8,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,3,18,195,8,18,1,19,1,19,1,20,1,20,1,20,0,0,21,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,0,0,207,0,42,1,0,0,
		0,2,44,1,0,0,0,4,58,1,0,0,0,6,68,1,0,0,0,8,70,1,0,0,0,10,84,1,0,0,0,12,
		97,1,0,0,0,14,99,1,0,0,0,16,104,1,0,0,0,18,112,1,0,0,0,20,136,1,0,0,0,
		22,152,1,0,0,0,24,160,1,0,0,0,26,168,1,0,0,0,28,170,1,0,0,0,30,177,1,0,
		0,0,32,179,1,0,0,0,34,181,1,0,0,0,36,194,1,0,0,0,38,196,1,0,0,0,40,198,
		1,0,0,0,42,43,5,30,0,0,43,1,1,0,0,0,44,45,5,30,0,0,45,3,1,0,0,0,46,47,
		5,1,0,0,47,52,3,6,3,0,48,49,5,2,0,0,49,51,3,6,3,0,50,48,1,0,0,0,51,54,
		1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,55,1,0,0,0,54,52,1,0,0,0,55,56,
		5,3,0,0,56,59,1,0,0,0,57,59,5,4,0,0,58,46,1,0,0,0,58,57,1,0,0,0,59,5,1,
		0,0,0,60,69,3,4,2,0,61,69,5,17,0,0,62,69,5,9,0,0,63,69,5,27,0,0,64,69,
		5,30,0,0,65,69,5,24,0,0,66,69,3,8,4,0,67,69,5,29,0,0,68,60,1,0,0,0,68,
		61,1,0,0,0,68,62,1,0,0,0,68,63,1,0,0,0,68,64,1,0,0,0,68,65,1,0,0,0,68,
		66,1,0,0,0,68,67,1,0,0,0,69,7,1,0,0,0,70,71,5,28,0,0,71,73,5,1,0,0,72,
		74,3,36,18,0,73,72,1,0,0,0,73,74,1,0,0,0,74,79,1,0,0,0,75,76,5,2,0,0,76,
		78,3,36,18,0,77,75,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,
		82,1,0,0,0,81,79,1,0,0,0,82,83,5,3,0,0,83,9,1,0,0,0,84,85,5,18,0,0,85,
		89,5,5,0,0,86,88,3,28,14,0,87,86,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,
		90,1,0,0,0,90,92,1,0,0,0,91,89,1,0,0,0,92,93,5,19,0,0,93,94,5,5,0,0,94,
		11,1,0,0,0,95,98,5,30,0,0,96,98,3,4,2,0,97,95,1,0,0,0,97,96,1,0,0,0,98,
		13,1,0,0,0,99,100,5,25,0,0,100,101,3,24,12,0,101,102,3,10,5,0,102,103,
		5,26,0,0,103,15,1,0,0,0,104,105,5,20,0,0,105,106,5,1,0,0,106,107,3,12,
		6,0,107,108,5,2,0,0,108,109,3,26,13,0,109,110,5,3,0,0,110,111,5,5,0,0,
		111,17,1,0,0,0,112,113,5,21,0,0,113,114,5,1,0,0,114,115,3,30,15,0,115,
		116,5,2,0,0,116,117,3,40,20,0,117,120,5,2,0,0,118,121,3,0,0,0,119,121,
		3,4,2,0,120,118,1,0,0,0,120,119,1,0,0,0,121,122,1,0,0,0,122,125,5,2,0,
		0,123,126,3,34,17,0,124,126,3,4,2,0,125,123,1,0,0,0,125,124,1,0,0,0,126,
		127,1,0,0,0,127,128,5,2,0,0,128,129,3,38,19,0,129,130,5,2,0,0,130,131,
		3,32,16,0,131,132,5,2,0,0,132,133,3,2,1,0,133,134,5,3,0,0,134,135,5,5,
		0,0,135,19,1,0,0,0,136,140,5,6,0,0,137,139,5,10,0,0,138,137,1,0,0,0,139,
		142,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,143,1,0,0,0,142,140,1,
		0,0,0,143,147,5,7,0,0,144,146,5,10,0,0,145,144,1,0,0,0,146,149,1,0,0,0,
		147,145,1,0,0,0,147,148,1,0,0,0,148,150,1,0,0,0,149,147,1,0,0,0,150,151,
		5,6,0,0,151,21,1,0,0,0,152,153,5,22,0,0,153,154,5,1,0,0,154,155,5,1,0,
		0,155,156,5,30,0,0,156,157,5,3,0,0,157,158,5,3,0,0,158,159,5,5,0,0,159,
		23,1,0,0,0,160,161,5,23,0,0,161,162,5,5,0,0,162,163,3,16,8,0,163,164,3,
		18,9,0,164,165,3,22,11,0,165,166,5,19,0,0,166,167,5,5,0,0,167,25,1,0,0,
		0,168,169,5,30,0,0,169,27,1,0,0,0,170,171,5,24,0,0,171,172,5,8,0,0,172,
		173,3,8,4,0,173,174,5,5,0,0,174,29,1,0,0,0,175,178,5,30,0,0,176,178,3,
		20,10,0,177,175,1,0,0,0,177,176,1,0,0,0,178,31,1,0,0,0,179,180,5,30,0,
		0,180,33,1,0,0,0,181,182,5,30,0,0,182,35,1,0,0,0,183,195,3,8,4,0,184,195,
		3,4,2,0,185,195,5,29,0,0,186,195,5,27,0,0,187,195,5,14,0,0,188,195,5,16,
		0,0,189,195,5,15,0,0,190,195,5,17,0,0,191,195,5,30,0,0,192,195,5,24,0,
		0,193,195,5,9,0,0,194,183,1,0,0,0,194,184,1,0,0,0,194,185,1,0,0,0,194,
		186,1,0,0,0,194,187,1,0,0,0,194,188,1,0,0,0,194,189,1,0,0,0,194,190,1,
		0,0,0,194,191,1,0,0,0,194,192,1,0,0,0,194,193,1,0,0,0,195,37,1,0,0,0,196,
		197,5,30,0,0,197,39,1,0,0,0,198,199,5,12,0,0,199,41,1,0,0,0,13,52,58,68,
		73,79,89,97,120,125,140,147,177,194
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace STEP
